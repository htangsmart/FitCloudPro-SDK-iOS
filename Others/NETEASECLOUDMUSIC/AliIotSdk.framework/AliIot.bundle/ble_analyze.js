// 版本更新
// 0.0.1 修改签名方式
// 0.0.2 添加btoa函数定义
// 0.0.3 添加%与占位符转换
// 0.0.4 device添加clientIP
// 0.0.5 所有接口添加clientIP
// 0.0.6 修改所有ID类型，确定ID长度
// 0.0.7 获取歌词下载url删除bitrate引号
// 0.0.8 第14个接口url参数
// 0.0.9 增加第15个接口
// 0.0.10 修改第15个接口encryptUserId，若为全0则不传入URL
// 0.0.11 修改第15个接口的URL
// 0.0.12 优化refresh token
// 0.0.13 修复列表函数
// 0.0.14 增加播放信息回传
// 0.0.15 修复refresh token错误

var JS_SCRIPT_VERSIONS = "0.0.15";   

// 公共参数
const signType = 'RSA_SHA256';
const URL_HEAD = 'http://openapi.music.163.com';
const LEN_urlidx = 4;
const LEN_appId = 32;
const LEN_timestamp = 8;
const LEN_appSign = 512;

// device内参数字段长度
const LEN_appVer = 6;
const LEN_osVer = 6;
const LEN_model = 22;
const LEN_deviceid = 12;

//  bizContent内参数字段长度
const LEN_limit = 4;
const LEN_offset = 4;
const LEN_playlistId = 64;
const LEN_bitrate = 2;
const LEN_withURL = 2;
const LEN_ID = 32;
const LEN_APP_SECRET = 32;
const LEN_cashierId = 8;

const URL_LOGIN = '/openapi/music/basic/oauth2/login/anonymous';
const URL_QRCODE = '/openapi/music/basic/user/oauth2/qrcodekey/get/v2';
const URL_TOKEN = '/openapi/music/basic/user/oauth2/token/refresh/v2';
const URL_GETPLAYLIST = '/openapi/music/basic/playlist/subed/get/v2';
const URL_CRTPLAYLIST = '/openapi/music/basic/playlist/created/get/v2';
const URL_DETAILPLAYLIST = '/openapi/music/basic/playlist/detail/get/v2';
const URL_GETSONG = '/openapi/music/basic/playlist/song/list/get/v3';
const URL_GETSTAR = '/openapi/music/basic/playlist/star/get/v2';
const URL_DOWNLOADURL = '/openapi/music/basic/song/downloadurl/get/v2';
const URL_DOWNLOADTEXT = '/openapi/music/basic/song/text/download/get/v2';
const URL_USRPROFILE = '/openapi/music/basic/user/profile/get/v2';
const URL_SONGDETAIL = '/openapi/music/basic/song/detail/get/v2';
const URL_GETQRCODE = '/openapi/music/basic/oauth2/device/login/qrcode/get';
const URL_GETLYRIC = '/openapi/music/basic/song/lyric/get/v2';
const URL_IOTCASHIER = '/prime/m/iot-cashier';
const URL_REPORT = '/openapi/music/basic/play/data/record';

const device_head = "%7B%22deviceType%22%3A%22andrwear%22%2C%22os%22%3A%22andrwear%22%2C%22channel%22%3A%22aliyun%22%2C%22brand%22%3A%22aliyun%22%2C"
const bizContent_QRCODE = '%7B%22type%22%3A2%2C%22expiredKey%22%3A%22604800%22%7D';
const song_play = 'startplay'
const song_play_end = 'play'
const music_type = 'song'
const song_file_type = 0;


var ERROR_CODE = new Uint8Array([0xFF]);

function cmd_analyze_get(data) {

    switch(data[3], data[2]){
        case 0x00, 0x01:
            const res_login_param = post_login(data);
            console.log("res_login_param:", res_login_param);
            // console.log("HexString:", toHexString(urltoarr(res_getplaylist_param, data)));
            return urltoarr(res_login_param, data);
        case 0x00, 0x02:
            const res_qrcode_param = post_qrcode(data);
            console.log("res_qrcode_param:", res_qrcode_param);
            return urltoarr(res_qrcode_param, data);
        case 0x00, 0x03:
            const res_token_param = post_token(data);
            console.log("res_token_param:", res_token_param);
            return urltoarr(res_token_param, data);
        case 0x00, 0x04:
            const res_getplaylist_param = post_getplaylist(data);
            console.log("res_getplaylist_param:", res_getplaylist_param);
            return urltoarr(res_getplaylist_param, data);
        case 0x00, 0x05:
            const res_crtplaylist_param = post_crtplaylist(data);
            console.log("res_crtplaylist_param:", res_crtplaylist_param);
            return urltoarr(res_crtplaylist_param, data);
        case 0x00, 0x06:
            const res_detailplaylist_param = post_detailplaylist(data);
            console.log("res_detailplaylist_param:", res_detailplaylist_param);
            return urltoarr(res_detailplaylist_param, data);
        case 0x00, 0x07:
            const res_getsong_param = post_getsong(data);
            console.log("res_getsong_param:", res_getsong_param);
            return urltoarr(res_getsong_param, data);
        case 0x00, 0x08:
            const res_getstar_param = post_getstar(data);
            console.log("res_getstar_param", res_getstar_param);
            return urltoarr(res_getstar_param, data);
        case 0x00, 0x09:
            const res_downloadurl_param = post_downloadurl(data);
            console.log("res_downloadurl_param:",res_downloadurl_param);
            return urltoarr(res_downloadurl_param, data);
        case 0x00, 0x0a:
            const res_downloadtext_param = post_downloadtext(data);
            console.log("res_downloadtext_param:", res_downloadtext_param);
            return urltoarr(res_downloadtext_param, data);
        case 0x00, 0x0b:
            const res_usrprofile_param = post_usrprofile(data);
            console.log("res_usrprofile_param:", res_usrprofile_param);
            return urltoarr(res_usrprofile_param, data);
        case 0x00, 0x0c:
            const res_songdetail = post_songdetail(data);
            console.log("res_songdetail:", res_songdetail);
            return urltoarr(res_songdetail, data);
        case 0x00, 0x0d:
            const res_getqrcode = post_getqrcode(data);
            console.log("res_getqrcode:", res_getqrcode);
            return urltoarr(res_getqrcode, data);
        case 0x00, 0x0e:
            const res_getlyric = post_getlyric(data);
            console.log("res_getlyric:", res_getlyric);
            return urltoarr(res_getlyric, data);
        case 0x00, 0x0f:
            const res_iotcashier = post_iotcashier(data);
            console.log("res_iotcashier", res_iotcashier);
            return urltoarr(res_iotcashier, data);
        default:
            return new Uint8Array([0x00]);    
    }
}


function cmd_analyze_post(data) {
    // console_log("cmd_analyze_post——data:", data);
    switch(data[3], data[2]){
        case 0x00, 0x01:
            const res_login_param = post_login(data);
            console.log("res_login_param:", res_login_param);
            // console_log("res_login_param:", res_login_param);
            return urltoarr(res_login_param, data);
        case 0x00, 0x02:
            const res_qrcode_param = post_qrcode(data);
            console.log("res_qrcode_param:", res_qrcode_param);
            return urltoarr(res_qrcode_param, data);
        case 0x00, 0x03:
            const res_token_param = post_token(data);
            console.log("res_token_param:", res_token_param);
            return urltoarr(res_token_param, data);
        case 0x00, 0x04:
            const res_getplaylist_param = post_getplaylist(data);
            console.log("res_getplaylist_param:", res_getplaylist_param);
            return urltoarr(res_getplaylist_param, data);
        case 0x00, 0x05:
            const res_crtplaylist_param = post_crtplaylist(data);
            console.log("res_crtplaylist_param:", res_crtplaylist_param);
            return urltoarr(res_crtplaylist_param, data);
        case 0x00, 0x06:
            const res_detailplaylist_param = post_detailplaylist(data);
            console.log("res_detailplaylist_param:", res_detailplaylist_param);
            return urltoarr(res_detailplaylist_param, data);
        case 0x00, 0x07:
            const res_getsong_param = post_getsong(data);
            console.log("res_getsong_param:", res_getsong_param);
            return urltoarr(res_getsong_param, data);
        case 0x00, 0x08:
            const res_getstar_param = post_getstar(data);
            console.log("res_getstar_param", res_getstar_param);
            return urltoarr(res_getstar_param, data);
        case 0x00, 0x09:
            const res_downloadurl_param = post_downloadurl(data);
            console.log("res_downloadurl_param:",res_downloadurl_param);
            return urltoarr(res_downloadurl_param, data);
        case 0x00, 0x0a:
            const res_downloadtext_param = post_downloadtext(data);
            console.log("res_downloadtext_param:", res_downloadtext_param);
            return urltoarr(res_downloadtext_param, data);
        case 0x00, 0x0b:
            const res_usrprofile_param = post_usrprofile(data);
            console.log("res_usrprofile_param:", res_usrprofile_param);
            return urltoarr(res_usrprofile_param, data);
        case 0x00, 0x0c:
            const res_songdetail = post_songdetail(data);
            console.log("res_songdetail:", res_songdetail);
            // console.log("HexString:", toHexString(urltoarr(res_songdetail, data)));
            return urltoarr(res_songdetail, data);
        case 0x00, 0x0d:
            const res_getqrcode = post_getqrcode(data);
            console.log("res_getqrcode:", res_getqrcode);
            return urltoarr(res_getqrcode, data);
        case 0x00, 0x0e:
            const res_getlyric = post_getlyric(data);
            console.log("res_getlyric:", res_getlyric);
            return urltoarr(res_getlyric, data);
        case 0x00, 0x0f:
            const res_iotcashier = post_iotcashier(data);
            console.log("res_iotcashier", res_iotcashier);
            return urltoarr(res_iotcashier, data);
        case 0x00, 0x10:
            const res_report_song_begin = post_report_song_begin(data);
            console.log("res_report_song_begin", res_report_song_begin);
            return urltoarr(res_report_song_begin, data);
        case 0x00, 0x11:
            const res_report_song_end = post_report_song_end(data);
            console.log("res_report_song_end", res_report_song_end);
            return urltoarr(res_report_song_end, data);
        default:
            return new Uint8Array([0x00]);
    }
}


/*
    入口函数
    函数入参:   new Uint8Array([0x43, 0x80, 0x00, 0x01, ...])
*/
function cmd_analyze_0x43(data) {
    console_log(data);
    // console_log(test_str);
    
    if (data[0] != 0x43) {
        return new Uint8Array([0x00]);
    }

    switch (data[1]) {
        case 0x80:
            return cmd_analyze_post(data);
        case 0x81:
            return cmd_analyze_get(data);
        default:
            return new Uint8Array([0x00]);
    }
}


/*
    函数功能:   输出字符串到屏幕
    函数入参:   字符串string
*/
function console_log(string) {    
    return string;
}


/*
    函数功能:   将解析的url转化为十六进制array并添加头尾参数
    函数入参:   url字符串
    函数出参:   添加头参数与尾参数的url对应的十六进制array
*/ 
function urltoarr(param_str, data) {
    
    //  若参数异常
    // if (param_str === "err_null" || param_str === "err_content") {
    //     return new Uint8Array([0x00]);
    // }

    switch(toHexString(ERROR_CODE)) {
        case "ff":
            const hex_param_arr = new Uint8Array(param_str.length + 7);
            hex_param_arr.fill(0);
            hex_param_arr[0] = 0x43;
            hex_param_arr[1] = 0x7F & data[1];  
            for (let i = 0; i < param_str.length; i++) {
                hex_param_arr[i+2] = param_str.charCodeAt(i);
            }
            console_log(hex_param_arr);
            return hex_param_arr
        default:
            return ERROR_CODE;
    }
}


/*
    函数功能:   十六进制字符串转化为对应ascii符号
    函数入参:   需转化字符串target, flag(flag为1时,使用.连接所有部分)    
*/
function hextostr(target, flag) {

    var partLength = target.length / 2; // 计算每个部分的长度
    var parts = []; // 存储分割后的部分

    for (let i = 0; i < partLength; i++) {
        var startIndex = i * 2;
        var part = target.substring(startIndex, startIndex + 2);
        var dec_part = parseInt(part, 16);
        var str_part = String.fromCharCode(dec_part);
        parts.push(str_part);
    }

    if (flag === 1) {
        var res = parts.join('.'); // 使用点号连接所有部分
        return res;
    } else {
        var res = parts.join(''); // 直接连接所有部分
        return res;
    }
}


/*
    函数功能:   将十六进制字符串转化为对应base64编码，同时将特殊符号做转义处理
    函数入参:   十六进制字符串hex_string  
    浏览器版本
*/
// function hexToBase64_window(hexString) {
//     // 将十六进制字符串拆分为每两个字符一组
//     var hexData = hexString.match(/.{1,2}/g);
//     // 将每组十六进制转换为十进制 
//     var binaryData = hexData.map(function(hex) {
//       return parseInt(hex, 16); 
//     });
//     // 创建Uint8Array数组
//     var uint8Array = new Uint8Array(binaryData); 
//     // 使用btoa进行base64编码
//     var base64Data = window.btoa(String.fromCharCode.apply(null, uint8Array)); 
//     // base64特殊字符转义    
//     const escapedStr = encodeURIComponent(base64Data);
//     return escapedStr;
// }


/*
    函数功能:   将十六进制字符串转化为对应base64编码，同时将特殊符号做转义处理
    函数入参:   十六进制字符串hex_string  
    Node.js版本
*/
// function hextobase64_node(hex_string) {
//     // Hex转base64
//     var encodeData = Buffer.from(hex_string, 'hex').toString('base64');
//     console.log("encodeData:", encodeData);

//     // base64特殊字符转义
//     const escapedStr = encodeURIComponent(encodeData);
//     console.log("escapedStr:", escapedStr);

//     return escapedStr;
// }


/*
    函数功能:   将字符串中的%替换为占位符再进行编码
    函数入参:   需要编码字符串str
*/
function myEncodeURIComponent(str) {
    // 将字符串中的 % 替换为占位符
    const placeholder = '__PERCENT__';
    const replacedStr = str.replace(/%/g, placeholder);
    
    // 对替换后的字符串进行编码
    const encodedStr = encodeURIComponent(replacedStr);
    
    // 将占位符替换回 %
    const restoredStr = encodedStr.replace(new RegExp(placeholder, 'g'), '%');
    
    return restoredStr;
}


/*
    函数功能:   hex转base64内置函数定义
    函数入参:   需要编码字符串input
*/
function js_btoa(input) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    let output = '';
    let i = 0;
    while (i < input.length) {
      // 将输入数据按每三个字节一组进行编码
      const character1 = input.charCodeAt(i++);
      const character2 = input.charCodeAt(i++);
      const character3 = input.charCodeAt(i++);
      var enc1 = character1 >> 2;
      var enc2 = ((character1 & 3) << 4) | (character2 >> 4);
      var enc3 = ((character2 & 15) << 2) | (character3 >> 6);
      var enc4 = character3 & 63;
      // 根据编码结果拼接输出字符串
      if (isNaN(character2)) {
        enc3 = enc4 = 64;
      } else if (isNaN(character3)) {
        enc4 = 64;
      }
      output = output +
        chars.charAt(enc1) + chars.charAt(enc2) +
        chars.charAt(enc3) + chars.charAt(enc4);
    }
    console.log("output:",output);
    const restoredStr = myEncodeURIComponent(output);
    console.log("restoredStr:",restoredStr);
    return restoredStr;
}


/*
    函数功能:   将十六进制字符串转化为对应base64编码，同时将特殊符号做转义处理
    函数入参:   十六进制字符串hex_string
    适配版本
*/
function hextobase64(hexString) {
    // 将hex字符串转化为字节数组
    const bytes = [];
    for (let i = 0; i < hexString.length; i += 2) {
        bytes.push(parseInt(hexString.substr(i, 2), 16));
    }

    // 使用Uint8Array将字节数组转化为二进制数据
    const binary = new Uint8Array(bytes);

    // 使用btoa将二进制数据转化为base64编码
    let base64 = '';
    for (let i = 0; i < binary.length; i++) {
        base64 += String.fromCharCode(binary[i]);
    }
    const res_base64 = js_btoa(base64)
    return res_base64;
}


/*
    函数功能:   读取直到下一个'00'的字符串
    函数入参:   字符串rawData, 字符串读取开始偏移startIndex 
*/ 
function readUntilZero(rawData, startIndex) {
    let endIndex = startIndex;
    while (endIndex < rawData.length) {
        if (rawData.substring(endIndex, endIndex + 2) === '00') {
            break;
        }
        endIndex += 2;
    }
    const readString = rawData.substring(startIndex, endIndex);
    const readLength = endIndex - startIndex;
    return { readString, readLength };
}


/*
    函数功能:   将十六进制array的十六进制数转化成对应字符串
    函数入参格式:   new Uint8Array
    函数入参示例:   new Uint8Array([0x31, 0x32])   ->  3132    
*/ 
function toHexString(byteArray) {
    return Array.from(byteArray, function(byte) {
        return ('0' + (byte & 0xFF).toString(16)).slice(-2);
    }).join('');
}


/*
    函数功能：将十六进制array的十六进制数转化为对应ascii字符 
    函数入参格式:   new Uint8Array
    函数入参示例:   new Uint8Array([0x31, 0x32])   ->  12   
*/ 
function arrayBufferToString(buffer, encoding = 'utf-8') {
    const decoder = new TextDecoder(encoding);
    return decoder.decode(buffer);
}


/*
    函数功能:   将字符串进行字节反转，转换大小端
    函数入参:   字符串str
*/
function reverseBytes(str) {

    // 将字符串转换成字节数组
    var arr = str.match(/.{2}/g).map(function(hex) {
        return parseInt(hex, 16);
      });

    // 翻转字节数组的顺序
    var newArr = new ArrayBuffer(arr.length);
    var newView = new DataView(newArr);
    for (var i = 0; i < arr.length; i++) {
      newView.setUint8(arr.length - i - 1, arr[i]);
    }
  
    // 将翻转后的字节数组转换成字符串
    var result = '';
    for (var i = 0; i < newArr.byteLength; i++) {
      result += newView.getUint8(i).toString(16).padStart(2, '0');
    }
    return result;
}


/*
    函数功能:   检查参数格式与内容
    函数入参:   待检测字符串appid, res_appVer, res_osVer, res_model, deviceid
*/
function checkParam(appid, res_appVer, res_osVer, res_model, deviceid) {

    //  检查格式
    if (!appid.match(/^[a-zA-Z0-9]+$/) || !res_appVer.match(/^\d+\.\d+\.\d+$/) || !res_osVer.match(/^\d+\.\d+\.\d+$/) || !res_model.match(/^[a-zA-Z0-9]+$/) || !deviceid.match(/^[a-zA-Z0-9]+$/)) {
        ERROR_CODE = new Uint8Array([0x07]);
        return "err_content";
    }

    return 0;
}
/*
    函数功能:   解析公共参数appId,timstamp,accessToken,appSign,appVer,osVer,model,deviceid,
    函数入参:   十六进制array
    函数出参:   rawData,appid,res_time,accessToken,res_sign,res_appVer,res_osVer,res_model,deviceid,startIndex
*/ 
function public_param(rawData_hex) {

    const rawData = toHexString(rawData_hex);

    //解析十六进制字符串
    let startIndex = 4;
    startIndex += LEN_urlidx;

    const appid = rawData.substring(startIndex, startIndex + LEN_appId);
    if (appid === null || appid === "") {
        ERROR_CODE = new Uint8Array([0x01]);
        console_log("appid is null!");
        return "err_null";
    }
    else if(appid.length != LEN_appId){
        ERROR_CODE = new Uint8Array([0x01]);
        console_log("invalid appid!");
        return "err_content";
    }
    startIndex += LEN_appId;

    var timestamp = rawData.substring(startIndex, startIndex + LEN_timestamp);
    if (timestamp === null || timestamp === "") {
        ERROR_CODE = new Uint8Array([0x02]);
        console_log("time is null!");
        return "err_null";
    }
    else if (timestamp.length != LEN_timestamp){
        ERROR_CODE = new Uint8Array([0x02]);
        console_log("invalid time!");
        return "err_content";
    }
    timestamp = reverseBytes(timestamp);
    startIndex += LEN_timestamp;
    const hex_time = "0x" + parseInt(timestamp, 16).toString(16);
    const res_time = parseInt(hex_time, 16) * 1000;
    if (915120001000 > res_time || res_time > 4102415999000) {
        ERROR_CODE = new Uint8Array([0x02]);
        console_log("illegal time!");
        return "err_content";
    }

    var { readString, readLength } = readUntilZero(rawData, startIndex);
    if (readLength === 0 || readString === null || readString === "") {
        ERROR_CODE = new Uint8Array([0x08]);
        console_log("accessToken is null!");
        return "err_null";
    }
    const accessToken = hextostr(readString, 0);
    if(!accessToken.match(/^[a-zA-Z0-9+/=]*$/)){
        ERROR_CODE = new Uint8Array([0x08]);
        console_log("invalid accessToken!");
        return "err_content";
    }
    startIndex += readLength + 2;

    const appSign = rawData.substring(startIndex, startIndex + LEN_appSign);
    startIndex += LEN_appSign;
    if (appSign === null || appSign === ""){
        ERROR_CODE = new Uint8Array([0x03]);
        console_log("appSign is null!");
        return "err_null";
    }
    else if(appSign.length != LEN_appSign){
        ERROR_CODE = new Uint8Array([0x03]);
        console_log("invalid appSign!");
        return "err_content";
    }
    //  appSign转换
    // var res_sign = hextobase64_node(appSign);
    // var res_sign = hexToBase64_window(appSign);
    var res_sign = hextobase64(appSign);

    //  解析device字段
    var appVer = rawData.substring(startIndex, startIndex + LEN_appVer);
    startIndex += LEN_appVer;
    if (appVer === null || appVer === "") {
        ERROR_CODE = new Uint8Array([0x04]);
        console_log("appVer is null!");
        return "err_null";
    }
    else if(appVer.length != LEN_appVer){
        ERROR_CODE = new Uint8Array([0x04]);
        console_log("invalid appVer!");
        return "err_content";
    }
    else {
        var appVer_arr = appVer.match(/.{2}/g);
        appVer_arr = appVer_arr.map((item) => parseInt(item, 16));
        var res_appVer = appVer_arr.join(".");
    }

    var osVer = rawData.substring(startIndex, startIndex + LEN_osVer);
    startIndex += LEN_osVer;
    if (osVer === null || osVer === ""){
        ERROR_CODE = new Uint8Array([0x05]);
        console_log("osVer is null!");
        return "err_null";
    }
    else if(osVer.length != LEN_osVer){
        ERROR_CODE = new Uint8Array([0x05]);
        console_log("invalid osVer!");
        return "err_content";
    }
    else {
        var osVer_arr = osVer.match(/.{2}/g);
        osVer_arr = osVer_arr.map((item) => parseInt(item, 16));
        var res_osVer = osVer_arr.join(".");
    }

    const model = rawData.substring(startIndex, startIndex + LEN_model);
    startIndex += LEN_model;
    if (model === null || model === ""){
        ERROR_CODE = new Uint8Array([0x06]);
        console_log("model is null!");
        return "err_null";
    }
    else if(model.length != LEN_model){
        ERROR_CODE = new Uint8Array([0x06]);
        console_log("invalid model!");
        return "err_content";
    }
    const res_model = hextostr(model, 0);

    const deviceid = rawData.substring(startIndex, startIndex + LEN_deviceid);
    if (deviceid === null || deviceid === ""){
        ERROR_CODE = new Uint8Array([0x07]);
        console_log("deviceid is null!");
        return "err_null";
    }
    else if(deviceid.length != LEN_deviceid){
        ERROR_CODE = new Uint8Array([0x07]);
        console_log("invalid deviceid!");
        return "err_content";
    }
    startIndex += LEN_deviceid;

    console.log("appid:", appid);
    console.log("timestamp:", res_time);
    console.log("accessToken",accessToken);
    console.log("sign:", res_sign);
    console.log("appVer:", res_appVer);   
    console.log("osVer:", res_osVer);   
    console.log("model:", res_model);
    console.log("deviceid:", deviceid);

    return {
        rawData,
        appid,
        res_time,
        accessToken,
        res_sign,
        res_appVer,
        res_osVer,
        res_model,
        deviceid,
        startIndex,
    };
}


/*  
    No.1 匿名登陆
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_login(rawData_hex) {

    const rawData = toHexString(rawData_hex);

    //解析十六进制字符串
    let startIndex = 4;
    startIndex += LEN_urlidx;

    var appid = rawData.substring(startIndex, startIndex + LEN_appId);
    if (appid === null || appid === "") {
        ERROR_CODE = new Uint8Array([0x01]);
        console_log("appid is null!");
        return "err_null";
    }
    else if (appid.length != LEN_appId) {
        ERROR_CODE = new Uint8Array([0x01]);
        console_log("appid illegal!");
        return "err_content";
    }
    startIndex += LEN_appId;

    var timestamp = rawData.substring(startIndex, startIndex + LEN_timestamp);
    if (timestamp === null || timestamp === "") {
        ERROR_CODE = new Uint8Array([0x02]);
        console_log("timestamp is null!");
        return "err_null";
    }
    else if (timestamp.length != LEN_timestamp) {
        ERROR_CODE = new Uint8Array([0x02]);
        console_log("invalid time!");
        return "err_content";
    }
    timestamp = reverseBytes(timestamp);
    startIndex += LEN_timestamp;
    const hex_time = "0x" + parseInt(timestamp, 16).toString(16);
    const res_time = parseInt(hex_time, 16) * 1000;
    if (915120001000 > res_time || res_time > 4102415999000) {
        ERROR_CODE = new Uint8Array([0x02]);
        console_log("timestamp illegal!");
        return "err_content";
    }

    var appSign = rawData.substring(startIndex, startIndex + LEN_appSign);
    startIndex += LEN_appSign;
    if (appSign === null || appSign === ""){
        ERROR_CODE = new Uint8Array([0x03]);
        console_log("appsign is null!");
        return "err_null";
    }
    else if (appSign.length != LEN_appSign) {
        ERROR_CODE = new Uint8Array([0x03]);
        console_log("invalid appSign!");
        return "err_content";
    }
    //  appSign转换
    // var res_sign = hextobase64_node(appSign);
    // var res_sign = hexToBase64_window(appSign);
    var res_sign = hextobase64(appSign);

    //  解析device字段
    var appVer = rawData.substring(startIndex, startIndex + LEN_appVer);
    startIndex += LEN_appVer;
    if (appVer === null || appVer === "") {
        ERROR_CODE = new Uint8Array([0x04]);
        console_log("appVer is null!");
        return "err_null";
    }
    else if (appVer.length != LEN_appVer) {
        ERROR_CODE = new Uint8Array([0x04]);
        console_log("invalid appVer!");
        return "err_content";
    }
    else {
        var appVer_arr = appVer.match(/.{2}/g);
        appVer_arr = appVer_arr.map((item) => parseInt(item, 16));
        var res_appVer = appVer_arr.join(".");
    }

    var osVer = rawData.substring(startIndex, startIndex + LEN_osVer);
    startIndex += LEN_osVer;
    if (osVer === null || osVer === "") {
        ERROR_CODE = new Uint8Array([0x05]);
        console_log("osVer is null!");
        return "err_null";
    }
    else if (osVer.length != LEN_osVer) {
        ERROR_CODE = new Uint8Array([0x05]);
        console_log("invalid osVer!");
        return "err_content";
    }
    else {
        var osVer_arr = osVer.match(/.{2}/g);
        osVer_arr = osVer_arr.map((item) => parseInt(item, 16));
        var res_osVer = osVer_arr.join(".");
    }

    var model = rawData.substring(startIndex, startIndex + LEN_model);
    startIndex += LEN_model;
    if (model === null || model === ""){
        ERROR_CODE = new Uint8Array([0x06]);
        console_log("model is null!");
        return "err_null";
    }
    else if (model.length != LEN_model){
        ERROR_CODE = new Uint8Array([0x06]);
        console_log("invalid model!");
        return "err_content";
    }
    var res_model = hextostr(model, 0);

    var deviceid = rawData.substring(startIndex, startIndex + LEN_deviceid);
    startIndex += LEN_deviceid;
    if (deviceid === null || deviceid === ""){
        ERROR_CODE = new Uint8Array([0x07]);
        console_log("deviceid is null!");
        return "err_null";
    }
    else if (deviceid.length != LEN_deviceid){
        ERROR_CODE = new Uint8Array([0x07]);
        console_log("invalid deviceid!");
        return "err_content";
    }

    console.log("appid:", appid);
    console.log("timestamp:", res_time);
    console.log("sign:", res_sign);
    console.log("appVer:", res_appVer);   
    console.log("osVer:", res_osVer);   
    console.log("model:", res_model);
    console.log("deviceid:", deviceid);

    // 检查格式
    if (!appid.match(/^[a-zA-Z0-9]+$/) || !res_appVer.match(/^\d+\.\d+\.\d+$/) || !res_osVer.match(/^\d+\.\d+\.\d+$/) || !res_model.match(/^[a-zA-Z0-9]+$/) || !deviceid.match(/^[a-zA-Z0-9]+$/)) {
        console_log("illegal content!");
        ERROR_CODE = new Uint8Array([0x07]);
        return "err_content";
    } 

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;

    const bizContent_LOGIN = `%7b%22clientId%22%3a%22${appid}%22%7d`;

    //  拼接字符串
    const res_param = `${URL_HEAD}${URL_LOGIN}?appId=${appid}&bizContent=${bizContent_LOGIN}&device=${device_head}${device_tail}&signType=${signType}&timestamp=${res_time}&sign=${res_sign}`;
    
    return res_param;
}


/*  
    No.2 获取登陆二维码
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_qrcode(rawData_hex) {

    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;

    //  拼接字符串
    res_param = `${URL_HEAD}${URL_QRCODE}?appId=${appid}&bizContent=${bizContent_QRCODE}&accessToken=${accessToken}&device=${device_head}${device_tail}&signType=${signType}&timestamp=${res_time}&sign=${res_sign}`;
    
    return res_param;
}


/*
    No.3 通过 RefreshToken 来刷新AccessToken
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_token(rawData_hex) {

    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    // 拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;

    // 解析appSecret
    const appSecret = rawData.substring(startIndex, startIndex + LEN_APP_SECRET);
    if (appSecret === null || appSecret === "") {
        ERROR_CODE = new Uint8Array([0x0e]);
        console_log("appSecret is null!");
        return "err_null";
    }
    else if(appSecret.length != LEN_APP_SECRET){
        ERROR_CODE = new Uint8Array([0x0e]);
        console_log("invalid appSecret!");
        return "err_content";
    }
    startIndex += LEN_APP_SECRET;
    console.log("appSecret:", appSecret);
    var { readString, readLength } = readUntilZero(rawData, startIndex);
    if (readLength === 0 || readString === null || readString === "") {
       ERROR_CODE = new Uint8Array([0x09]);
       return "err_null";
    }
    console.log("readLength:", readLength);
    const refreshToken = hextostr(readString, 0);
    console.log("refreshToken:", refreshToken);
    startIndex += readLength;

    const bizContent_TOKEN = `%7b%22clientId%22%3a%22${appid}%22%2c%22clientSecret%22%3a%22${appSecret}%22%2c%22refreshToken%22%3a%22${refreshToken}%22%7d`;

    //拼接字符串
    res_param = `${URL_HEAD}${URL_TOKEN}?bizContent=${bizContent_TOKEN}&appId=${appid}&signType=${signType}&accessToken=${accessToken}&device=${device_head}${device_tail}&timestamp=${res_time}&sign=${res_sign}`;
    
    return res_param;
}


/*
    No.4 获取用户收藏的歌单列表
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_getplaylist(rawData_hex) {

    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;
    
    //  解析bizContent
    var limit = rawData.substring(startIndex, startIndex + LEN_limit);
    if (limit === null || limit === "") {
        ERROR_CODE = new Uint8Array([0x0b]);
        return "err_null";
    }
    else if(limit.length != LEN_limit){
        ERROR_CODE = new Uint8Array([0x0b]);
        return "err_content";
    }
    limit = reverseBytes(limit);
    startIndex += LEN_limit;
    const hex_limit = "0x" + parseInt(limit, 16).toString(16);
    const res_limit = parseInt(hex_limit, 16);
    console.log("limit:", res_limit);

    var offset = rawData.substring(startIndex,startIndex + LEN_offset);
    if (offset === null || offset === "") {
        ERROR_CODE = new Uint8Array([0x0c]);
        return "err_null";
    }
    else if(offset.length != LEN_offset){
        ERROR_CODE = new Uint8Array([0x0c]);
        return "err_content";
    }
    offset = reverseBytes(offset);
    startIndex += LEN_offset;
    const hex_offset = "0x" + parseInt(offset, 16).toString(16);
    const res_offset = parseInt(hex_offset, 16);
    console.log("offset:", res_offset);

    if (!(0 < res_limit && res_limit <= 500 && 0 <= res_offset)) {
        ERROR_CODE = new Uint8Array([0x0c]);
        return "err_content";
    }
    const bizContent_GETPLAYLIST = `%7b%22limit%22%3a%22${res_limit}%22%2c%22offset%22%3a%22${res_offset}%22%7d`;

    //  拼接字符串
    res_param = `${URL_HEAD}${URL_GETPLAYLIST}?bizContent=${bizContent_GETPLAYLIST}&appId=${appid}&signType=${signType}&accessToken=${accessToken}&device=${device_head}${device_tail}&timestamp=${res_time}&sign=${res_sign}`;
    
    return res_param;
}


/*
    No.5 获取用户创建歌单列表（含红心歌单）
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_crtplaylist(rawData_hex) {

    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;

    //  解析bizContent
    var limit = rawData.substring(startIndex, startIndex + LEN_limit);
    if (limit === null || limit === "") {
        ERROR_CODE = new Uint8Array([0x0b]);
        return "err_null";
    }
    else if(limit.length != LEN_limit){
        ERROR_CODE = new Uint8Array([0x0b]);
        return "err_content";
    }
    limit = reverseBytes(limit);
    startIndex += LEN_limit;
    const hex_limit = "0x" + parseInt(limit, 16).toString(16);
    const res_limit = parseInt(hex_limit, 16);
    console.log("limit:", res_limit);

    var offset = rawData.substring(startIndex,startIndex + LEN_offset);
    if (offset === null || offset === "") {
        ERROR_CODE = new Uint8Array([0x0c]);
        return "err_null";
    }
    else if(offset.length != LEN_offset){
        ERROR_CODE = new Uint8Array([0x0c]);
        return "err_content";
    }
    offset = reverseBytes(offset);
    startIndex += LEN_offset;
    const hex_offset = "0x" + parseInt(offset, 16).toString(16);
    const res_offset = parseInt(hex_offset, 16);
    console.log("offset:", res_offset);

    if (!(0 < res_limit && res_limit <= 500 && 0 <= res_offset)) {
        ERROR_CODE = new Uint8Array([0x0c]);
        return "err_content";
    }

    const bizContent_CRTPLAYLIST = `%7b%22limit%22%3a%22${res_limit}%22%2c%22offset%22%3a%22${res_offset}%22%7d`;

    //  拼接字符串
    res_param = `${URL_HEAD}${URL_CRTPLAYLIST}?bizContent=${bizContent_CRTPLAYLIST}&appId=${appid}&signType=${signType}&accessToken=${accessToken}&device=${device_head}${device_tail}&timestamp=${res_time}&sign=${res_sign}`;
    
    return res_param;
}


/*
    No.6 获取歌单详情
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_detailplaylist(rawData_hex) {

    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;
    
    //  解析bizContent
    const playlistid = rawData.substring(startIndex, startIndex + LEN_ID);
    if (playlistid === null || playlistid === "") {
        ERROR_CODE = new Uint8Array([0x0d]);
        console_log("playlistid is null!");
        return "err_null";
    }
    else if(playlistid.length != LEN_ID){
        ERROR_CODE = new Uint8Array([0x0d]);
        console_log("invalid playlistid!");
        return "err_content";
    }
    startIndex += LEN_ID;
    console.log("playlistid:", playlistid);

    const bizContent_DETAILPLAYLIST = `%7b%22playlistId%22%3a%22${playlistid}%22%7d`;

    //  拼接字符串
    res_param = `${URL_HEAD}${URL_DETAILPLAYLIST}?bizContent=${bizContent_DETAILPLAYLIST}&appId=${appid}&signType=${signType}&accessToken=${accessToken}&device=${device_head}${device_tail}&timestamp=${res_time}&sign=${res_sign}`;
    
    return res_param;
}


/*
    No.7 获取歌单详情
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_getsong(rawData_hex) {
    
    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;
    
    //  解析bizContent
    const playlistid = rawData.substring(startIndex, startIndex + LEN_ID);
    if (playlistid === null || playlistid === "") {
        ERROR_CODE = new Uint8Array([0x0d]);
        console_log("playlistid is null!");
        return "err_null";
    }
    else if(playlistid.length != LEN_ID){
        ERROR_CODE = new Uint8Array([0x0d]);
        console_log("invalid playlistid!");
        return "err_content";
    }
    startIndex += LEN_ID;
    console.log("playlistid:", playlistid);

    //  解析bizContent
    var limit = rawData.substring(startIndex, startIndex + LEN_limit);
    if (limit === null || limit === "") {
        ERROR_CODE = new Uint8Array([0x0b]);
        return "err_null";
    }
    else if(limit.length != LEN_limit){
        ERROR_CODE = new Uint8Array([0x0b]);
        return "err_content";
    }
    limit = reverseBytes(limit);
    startIndex += LEN_limit;
    const hex_limit = "0x" + parseInt(limit, 16).toString(16);
    const res_limit = parseInt(hex_limit, 16);
    console.log("limit:", res_limit);

    var offset = rawData.substring(startIndex,startIndex + LEN_offset);
    if (offset === null || offset === "") {
        ERROR_CODE = new Uint8Array([0x0c]);
        return "err_null";
    }
    else if(offset.length != LEN_offset){
        ERROR_CODE = new Uint8Array([0x0c]);
        return "err_content";
    }
    offset = reverseBytes(offset);
    startIndex += LEN_offset;
    const hex_offset = "0x" + parseInt(offset, 16).toString(16);
    const res_offset = parseInt(hex_offset, 16);
    console.log("offset:", res_offset); 

    console.log("res_limit:", res_limit); 
    console.log("res_offset:", res_offset); 
    if (!(0 < res_limit && res_limit <= 500 && 0 <= res_offset)) {
        ERROR_CODE = new Uint8Array([0x0c]);
        return "err_content";
    }

    const bizContent_GETSONG = `%7b%22playlistId%22%3a%22${playlistid}%22%2c%22limit%22%3a%22${res_limit}%22%2c%22offset%22%3a%22${res_offset}%22%7d`;

    //  拼接字符串
    res_param = `${URL_HEAD}${URL_GETSONG}?bizContent=${bizContent_GETSONG}&appId=${appid}&signType=${signType}&accessToken=${accessToken}&device=${device_head}${device_tail}&timestamp=${res_time}&sign=${res_sign}`;
    
    return res_param;
    
}


/*
    No.8 获取红心歌单
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_getstar(rawData_hex) {

    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;
    
    // //  解析bizContent
    // var limit = rawData.substring(startIndex, startIndex + LEN_limit);
    // if (limit === null || limit === "") {
    //     ERROR_CODE = new Uint8Array([0x0b]);
    //     return "err_null";
    // }
    // else if(limit.length != LEN_limit){
    //     ERROR_CODE = new Uint8Array([0x0b]);
    //     return "err_content";
    // }
    // limit = reverseBytes(limit);
    // startIndex += LEN_limit;
    // const hex_limit = "0x" + parseInt(limit, 16).toString(16);
    // const res_limit = parseInt(hex_limit, 16);
    // console.log("limit:", res_limit);

    // var offset = rawData.substring(startIndex,startIndex + LEN_offset);
    // if (offset === null || offset === "") {
    //     ERROR_CODE = new Uint8Array([0x0c]);
    //     return "err_null";
    // }
    // else if(offset.length != LEN_offset){
    //     ERROR_CODE = new Uint8Array([0x0c]);
    //     return "err_content";
    // }
    // offset = reverseBytes(offset);
    // startIndex += LEN_offset;
    // const hex_offset = "0x" + parseInt(offset, 16).toString(16);
    // const res_offset = parseInt(hex_offset, 16);
    // console.log("offset:", res_offset);

    // if (!(0 < res_limit && res_limit <= 500 && 0 <= res_offset)) {
    //     ERROR_CODE = new Uint8Array([0x0c]);
    //     return "err_content";
    // }

    // const bizContent_GETSTAR = `%7b%22limit%22%3a%2b${res_limit}%2c%22offset%22%3a%2b${res_offset}%7d`;

    //  拼接字符串
    res_param = `${URL_HEAD}${URL_GETSTAR}?appId=${appid}&signType=${signType}&accessToken=${accessToken}&device=${device_head}${device_tail}&timestamp=${res_time}&sign=${res_sign}`;
    
    return res_param;
}


/*
    No.9 获取歌曲下载URL
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_downloadurl(rawData_hex) {

    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;
    
    //  解析bizContent
    const songid = rawData.substring(startIndex, startIndex + LEN_ID);
    if (songid === null || songid === "") {
        ERROR_CODE = new Uint8Array([0x0e]);
        console_log("songid is null!");
        return "err_null";
    }
    else if(songid.length != LEN_ID){
        ERROR_CODE = new Uint8Array([0x0e]);
        console_log("invalid songid!");
        return "err_content";
    }
    startIndex += LEN_ID;
    console.log("songid:", songid);

    const bitrate = rawData.substring(startIndex, startIndex + LEN_bitrate);
    startIndex += LEN_bitrate;
    switch(bitrate & 0xFF) {
        case 1:
            var res_bitrate = 128;
            break;
        case 2:
            var res_bitrate = 192;
            break;
        case 4:
            var res_bitrate = 320;
            break;
        case 8:
            var res_bitrate = 999;
            break;
        case 10:
            var res_bitrate = 1999;
            break;
        default:
            var res_bitrate = 1999;
            break;
    }
    console.log("bitrate:", res_bitrate);

    const bizContent_DOWNLOADURL = `%7b%22songId%22%3a%22${songid}%22%2c%22bitrate%22%3a${res_bitrate}%7d`;
    
    //  拼接字符串
    res_param = `${URL_HEAD}${URL_DOWNLOADURL}?bizContent=${bizContent_DOWNLOADURL}&appId=${appid}&signType=${signType}&accessToken=${accessToken}&device=${device_head}${device_tail}&timestamp=${res_time}&sign=${res_sign}`;
    
    return res_param;
}


/*
    No.10 获取歌曲无法下载toast文案
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_downloadtext(rawData_hex) {

    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;
    
    //  解析bizContent
    const songid = rawData.substring(startIndex, startIndex + LEN_ID);
    if (songid === null || songid === "") {
        ERROR_CODE = new Uint8Array([0x0e]);
        console_log("songid is null!");
        return "err_null";
    }
    else if(songid.length != LEN_ID){
        ERROR_CODE = new Uint8Array([0x0e]);
        console_log("invalid songid!");
        return "err_content";
    }
    startIndex += LEN_ID;
    console.log("songid:", songid);

    const bizContent_DOWNLOADTEXT = `%7b%22songId%22%3a%22${songid}%22%7d`;
    
    //  拼接字符串
    res_param = `${URL_HEAD}${URL_DOWNLOADTEXT}?bizContent=${bizContent_DOWNLOADTEXT}&appId=${appid}&signType=${signType}&accessToken=${accessToken}&device=${device_head}${device_tail}&timestamp=${res_time}&sign=${res_sign}`;
    
    return res_param;
}


/*  
    No.11 获取用户基本信息
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_usrprofile(rawData_hex) {
    
    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;

    //  拼接字符串
    res_param = `${URL_HEAD}${URL_USRPROFILE}?appId=${appid}&signType=${signType}&accessToken=${accessToken}&device=${device_head}${device_tail}&timestamp=${res_time}&sign=${res_sign}`;
    
    return res_param;
}


/*  
    No.12 获取歌曲详情
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_songdetail(rawData_hex) {

    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;
    
    //  解析bizContent
    const songid = rawData.substring(startIndex, startIndex + LEN_ID);
    if (songid === null || songid === "") {
        ERROR_CODE = new Uint8Array([0x0e]);
        console_log("songid is null!");
        return "err_null";
    }
    else if(songid.length != LEN_ID){
        ERROR_CODE = new Uint8Array([0x0e]);
        console_log("invalid songid!");
        return "err_content";
    }
    startIndex += LEN_ID;
    console.log("songid:", songid);

    const bizContent_SONGDETAIL = `%7b%22artistsId%22%3a%22${songid}%22%7d`;
    
    //  拼接字符串
    res_param = `${URL_HEAD}${URL_SONGDETAIL}?accessToken=${accessToken}&appId=${appid}&bizContent=${bizContent_SONGDETAIL}&device=${device_head}${device_tail}&signType=${signType}&timestamp=${res_time}&sign=${res_sign}`;
    
    return res_param;
}


/*  
    No.13 轮询获取二维码状态
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_getqrcode(rawData_hex) {
    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;

    //  解析bizContent
    var { readString, readLength } = readUntilZero(rawData, startIndex);
    if (readLength === 0 || readString === null || readString === "") {
        ERROR_CODE = new Uint8Array([0x0f]);
        return "err_null";
    }
    const unikey = hextostr(readString, 0);
    if (! (unikey.match(/^[a-zA-Z0-9\-]+$/))) {
        ERROR_CODE = new Uint8Array([0x0f]);
        return "err_content";
    }
    console.log("unikey:", unikey);
    console.log("Len_unikey:", readLength / 2);
    startIndex += readLength + 2;

    const bizContent_GETQRCODE = `%7b%22key%22%3a%22${unikey}%22%2c%22clientId%22%3a%22${appid}%22%7d`;
    
    //  拼接字符串
    res_param = `${URL_HEAD}${URL_GETQRCODE}?bizContent=${bizContent_GETQRCODE}&appId=${appid}&signType=${signType}&accessToken=${accessToken}&device=${device_head}${device_tail}&timestamp=${res_time}&sign=${res_sign}`;
    
    return res_param;
}


/*  
    No.14 获取歌词
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_getlyric(rawData_hex) {
    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;

    //  解析bizContent
    const songid = rawData.substring(startIndex, startIndex + LEN_ID);
    if (songid === null || songid === "") {
        ERROR_CODE = new Uint8Array([0x0e]);
        console_log("songid is null!");
        return "err_null";
    }
    else if(songid.length != LEN_ID){
        ERROR_CODE = new Uint8Array([0x0e]);
        console_log("invalid songid!");
        return "err_content";
    }
    startIndex += LEN_ID;
    console.log("songid:", songid);

    const bizContent_GETLYRIC = `%7b%22songId%22%3a%22${songid}%22%7d`;

    //  拼接字符串
    res_param = `${URL_HEAD}${URL_GETLYRIC}?bizContent=${bizContent_GETLYRIC}&appId=${appid}&signType=${signType}&accessToken=${accessToken}&device=${device_head}${device_tail}&timestamp=${res_time}&sign=${res_sign}`;
    
    return res_param;
}


/*  
    No.15 会员购买
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_iotcashier(rawData_hex) {

    const rawData = toHexString(rawData_hex);
    let flag_encryptUserId = 1;

    //解析十六进制字符串
    let startIndex = 4;
    startIndex += LEN_urlidx;

    var appid = rawData.substring(startIndex, startIndex + LEN_appId);
    if (appid === null || appid === "") {
        ERROR_CODE = new Uint8Array([0x01]);
        console_log("appid is null!");
        return "err_null";
    }
    else if (appid.length != LEN_appId) {
        ERROR_CODE = new Uint8Array([0x01]);
        console_log("appid illegal!");
        return "err_content";
    }
    startIndex += LEN_appId;

    var encryptUserId = rawData.substring(startIndex, startIndex + LEN_ID);
    if (encryptUserId === null || encryptUserId === "") {
        ERROR_CODE = new Uint8Array([0x0f]);
        console_log("encryptUserId is null!");
        return "err_null";
    }
    else if (encryptUserId.length != LEN_ID) {
        ERROR_CODE = new Uint8Array([0x0f]);
        console_log("encryptUserId illegal!");
        return "err_content";
    }
    if (encryptUserId === '00000000000000000000000000000000') {
        flag_encryptUserId = 0;
    }
    console.log("flag:", flag_encryptUserId);
    startIndex += LEN_ID;

    var cashierSign = rawData.substring(startIndex, startIndex + LEN_appSign);
    startIndex += LEN_appSign;
    if (cashierSign === null || cashierSign === ""){
        ERROR_CODE = new Uint8Array([0x03]);
        console_log("cashierSign is null!");
        return "err_null";
    }
    else if (cashierSign.length != LEN_appSign) {
        ERROR_CODE = new Uint8Array([0x03]);
        console_log("invalid cashierSign!");
        return "err_content";
    }
    //  cashierSign转换
    // var res_sign = hextobase64_node(cashierSign);
    // var res_sign = hexToBase64_window(cashierSign);
    var res_sign = hextobase64(cashierSign);

    var cashierId = rawData.substring(startIndex, startIndex + LEN_cashierId);
    if (cashierId === null || cashierId === "") {
        ERROR_CODE = new Uint8Array([0x10]);
        console_log("cashierId is null!");
        return "err_null";
    }
    else if (cashierId.length != LEN_cashierId){
        ERROR_CODE = new Uint8Array([0x10]);
        console_log("invalid cashierId!");
        return "err_content";
    } 
    cashierId = reverseBytes(cashierId);
    startIndex += LEN_cashierId;
    const hex_cashierId = "0x" + parseInt(cashierId, 16).toString(16);
    const res_cashierId = parseInt(hex_cashierId, 16);

    console.log("appid:", appid);
    console.log("encryptUserId:", encryptUserId);
    console.log("sign:", res_sign);
    console.log("cashierId:", res_cashierId);   

    // 检查格式
    if (!appid.match(/^[a-zA-Z0-9]+$/)) {
        console_log("illegal content!");
        ERROR_CODE = new Uint8Array([0x07]);
        return "err_content";
    } 

    // const bizContent_IOTCASHIER = `%7b%22clientId%22%3a%22${appid}%22%7d`;

    //  拼接字符串
    if (flag_encryptUserId === 0) {
        var res_param = `https://music.163.com${URL_IOTCASHIER}?appId=${appid}&cashierId=${res_cashierId}&cashierSign=${res_sign}`;
    }
    else {
        res_param = `https://music.163.com${URL_IOTCASHIER}?appId=${appid}&cashierId=${res_cashierId}&encryptUserId=${encryptUserId}&cashierSign=${res_sign}`;
    }

    res_param = encodeURIComponent(res_param);

    res_param = `http://music.163.com/api/middle/shorturl/generate?url=${res_param}`;
    return res_param;
}


/*  
    No.16 歌曲播放开始数据上报
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_report_song_begin(rawData_hex) {
    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;

    //  解析bizContent
    const temp_bitratelen =4;
    var bitrate = rawData.substring(startIndex, startIndex + temp_bitratelen);//TODO
    if (bitrate === null || bitrate === "") {
        ERROR_CODE = new Uint8Array([0x0b]);
        return "err_null";
    }
    else if(bitrate.length != temp_bitratelen){
        ERROR_CODE = new Uint8Array([0x0b]);
        return "err_content";
    }
    bitrate = reverseBytes(bitrate);
    startIndex += temp_bitratelen;
    const hex_bitrate = "0x" + parseInt(bitrate, 16).toString(16);
    const res_bitrate = parseInt(hex_bitrate, 16);
    console.log("bitrate:", res_bitrate);

    const temp_starttimelen =8;
    var start_time = rawData.substring(startIndex,startIndex + temp_starttimelen);
    if (start_time === null || start_time === "") {
        ERROR_CODE = new Uint8Array([0x0c]);
        return "err_null";
    }
    else if(start_time.length != temp_starttimelen){
        ERROR_CODE = new Uint8Array([0x0c]);
        return "err_content";
    }
    start_time = reverseBytes(start_time);
    startIndex += temp_starttimelen;
    const hex_start_time = "0x" + parseInt(start_time, 16).toString(16);
    const res_start_time = parseInt(hex_start_time, 16)*1000;
    console.log("start_time:", res_start_time);

    const songid = rawData.substring(startIndex, startIndex + LEN_ID);
    if (songid === null || songid === "") {
        ERROR_CODE = new Uint8Array([0x0e]);
        console_log("songid is null!");
        return "err_null";
    }
    else if(songid.length != LEN_ID){
        ERROR_CODE = new Uint8Array([0x0e]);
        console_log("invalid songid!");
        return "err_content";
    }
    startIndex += LEN_ID;
    console.log("songid:", songid);

    //%22limit%22%3a%22${res_limit}%22%2c
    //%22bitrate%22%3a%22${res_bitrate}%22%2c
    //%22id%22%3a%22${songid}%22%7d`;
    const bizContent_CRTPLAYLIST = `%7b%22action%22%3a%22${song_play}%22%2c%22bitrate%22%3a${res_bitrate}%2c%22file%22%3a${song_file_type}%2c%22type%22%3a%22${music_type}%22%2c%22startLogTime%22%3a%22${res_start_time}%22%2c%22id%22%3a%22${songid}%22%7d`;
    //  拼接字符串
    //res_param = `${URL_HEAD}${URL_REPORT}?bizContent=${bizContent_CRTPLAYLIST}&appId=${appid}&signType=${signType}&accessToken=${accessToken}&device=${device_head}${device_tail}&timestamp=${res_time}&sign=${res_sign}`;
    res_param = `${URL_HEAD}${URL_REPORT}?appId=${appid}&signType=${signType}&timestamp=${res_time}&device=${device_head}${device_tail}&bizContent=${bizContent_CRTPLAYLIST}&sign=${res_sign}&accessToken=${accessToken}`;

    return res_param;

}

/*  
    No.17 歌曲播放结束数据上报
    函数入参：十六进制字符串
    函数出参：解析后的URL
*/
function post_report_song_end(rawData_hex) {
    //  解析公共字段
    var param_result = public_param(rawData_hex);
    if (param_result === "err_null" || param_result === "err_content") {
        return param_result;
    }
    var { rawData, appid, res_time, accessToken, res_sign, res_appVer, res_osVer, res_model, deviceid, startIndex } = param_result;

    var res_param = checkParam(appid, res_appVer, res_osVer, res_model, deviceid);
    if (res_param === "err_content") {
        return res_param;
    }

    //  拼接device_tail
    const device_tail = `%22appVer%22%3A%22${res_appVer}%22%2C%22osVer%22%3A%22${res_osVer}%22%2C%22model%22%3A%22${res_model}%22%2C%22deviceId%22%3A%22${deviceid}%22%2C%22clientIp%22%3A%22127.0.0.1%22%7D`;

    //  解析bizContent
    const temp_bitratelen =4;
    var bitrate = rawData.substring(startIndex, startIndex + temp_bitratelen);
    if (bitrate === null || bitrate === "") {
        ERROR_CODE = new Uint8Array([0x0b]);
        return "err_null";
    }
    else if(bitrate.length != temp_bitratelen){
        ERROR_CODE = new Uint8Array([0x0b]);
        return "err_content";
    }
    bitrate = reverseBytes(bitrate);
    startIndex += temp_bitratelen;
    const hex_bitrate = "0x" + parseInt(bitrate, 16).toString(16);
    const res_bitrate = parseInt(hex_bitrate, 16);
    console.log("bitrate:", res_bitrate);

    const temp_starttimelen =8;
    var start_time = rawData.substring(startIndex,startIndex + temp_starttimelen);
    if (start_time === null || start_time === "") {
        ERROR_CODE = new Uint8Array([0x0c]);
        return "err_null";
    }
    else if(start_time.length != temp_starttimelen){
        ERROR_CODE = new Uint8Array([0x0c]);
        return "err_content";
    }
    start_time = reverseBytes(start_time);
    startIndex += temp_starttimelen;
    const hex_start_time = "0x" + parseInt(start_time, 16).toString(16);
    const res_start_time = parseInt(hex_start_time, 16)*1000;
    console.log("start_time:", res_start_time);

    const songid = rawData.substring(startIndex, startIndex + LEN_ID);
    if (songid === null || songid === "") {
        ERROR_CODE = new Uint8Array([0x0e]);
        console_log("songid is null!");
        return "err_null";
    }
    else if(songid.length != LEN_ID){
        ERROR_CODE = new Uint8Array([0x0e]);
        console_log("invalid songid!");
        return "err_content";
    }
    startIndex += LEN_ID;
    console.log("songid:", songid);

    const temp_timelen =4;
    var time = rawData.substring(startIndex, startIndex + temp_timelen);
    if (time === null || time === "") {
        ERROR_CODE = new Uint8Array([0x0b]);
        return "err_null";
    }
    else if(time.length != temp_timelen){
        ERROR_CODE = new Uint8Array([0x0b]);
        return "err_content";
    }
    time = reverseBytes(time);
    startIndex += temp_timelen;
    const hex_time = "0x" + parseInt(time, 16).toString(16);
    const res_time_long = parseInt(hex_time, 16);
    console.log("time:", res_time_long);

    const temp_endlen =2;
    var end = rawData.substring(startIndex, startIndex + temp_endlen);
    if (end === null || end === "") {
        ERROR_CODE = new Uint8Array([0x0b]);
        return "err_null";
    }
    else if(end.length != temp_endlen){
        ERROR_CODE = new Uint8Array([0x0b]);
        return "err_content";
    }
    var res_end ='';
    if(end == 0) {
        var res_end = "playend";
    }else if(end == 1){
        var res_end = "interrupt";
    }else if(end == 2){
        var res_end = "exception";
    }else if(end == 3){
        var res_end = "ui";
    }else{
        var res_end = "error";
        return "err_content:end";
    }
    console.log("res_end:", res_end);

    const bizContent_CRTPLAYLIST = `%7b%22action%22%3a%22${song_play_end}%22%2c%22bitrate%22%3a${res_bitrate}%2c%22file%22%3a${song_file_type}%2c%22type%22%3a%22${music_type}%22%2c%22startLogTime%22%3a%22${res_start_time}%22%2c%22id%22%3a%22${songid}%22%2c%22time%22%3a${res_time_long}%2c%22end%22%3a%22${res_end}%22%7d`;
    //  拼接字符串
    //res_param = `${URL_HEAD}${URL_REPORT}?bizContent=${bizContent_CRTPLAYLIST}&appId=${appid}&signType=${signType}&accessToken=${accessToken}&device=${device_head}${device_tail}&timestamp=${res_time}&sign=${res_sign}`;
    res_param = `${URL_HEAD}${URL_REPORT}?appId=${appid}&signType=${signType}&timestamp=${res_time}&device=${device_head}${device_tail}&bizContent=${bizContent_CRTPLAYLIST}&sign=${res_sign}&accessToken=${accessToken}`;

    return res_param;

}

// 接口No.1 测试输入
const input_hex_1 = new Uint8Array([0x43, 0x80, 0x01, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0xcc, 0xa2, 0xd0, 0x64, 0x12, 0x90, 0xdf, 0x07, 0x08, 0x4b, 0xdd, 0xa8, 0xf6, 0x67, 0x93, 0x71, 0x07, 0x5b, 0x40, 0x12, 0x74, 0xa3, 0x8c, 0xa8, 0x99, 0x1a, 0xc2, 0xe5, 0x2c, 0x5f, 0xa0, 0x1d, 0x78, 0x07, 0x81, 0x10, 0x7f, 0xca, 0x7a, 0xf5, 0x71, 0xb6, 0xda, 0x96, 0x8e, 0x1d, 0x80, 0xa4, 0x69, 0x09, 0xdc, 0x34, 0xc2, 0xee, 0xda, 0xa2, 0x3a, 0xfa, 0x9c, 0xc0, 0xf5, 0x63, 0x40, 0xb6, 0x40, 0x73, 0xa7, 0x60, 0xc3, 0x1a, 0xff, 0x5b, 0x33, 0xbf, 0x09, 0xca, 0x73, 0xa1, 0x88, 0x14, 0x0b, 0x9c, 0x1a, 0x2d, 0x6f, 0x36, 0xd3, 0x70, 0xb2, 0x8d, 0xb8, 0xbb, 0xa6, 0x44, 0x98, 0x3b, 0xbf, 0x24, 0x65, 0x5d, 0xd4, 0x1a, 0x58, 0x72, 0xc1, 0x6b, 0xd8, 0x15, 0xb8, 0x44, 0x04, 0x88, 0xd7, 0x26, 0x40, 0x97, 0x12, 0xe0, 0xc4, 0x42, 0x7a, 0xda, 0xe0, 0x60, 0x64, 0x5e, 0x60, 0x2e, 0x98, 0x9f, 0x7f, 0x85, 0x9d, 0x10, 0x6a, 0x5c, 0xbe, 0x4e, 0x18, 0x87, 0xf3, 0x54, 0x28, 0x07, 0xe7, 0xd1, 0x1f, 0xd5, 0x09, 0xa0, 0x73, 0x18, 0x40, 0x2c, 0xa7, 0x10, 0xf1, 0x5e, 0xf2, 0xcb, 0x4b, 0xb4, 0xe8, 0xd2, 0x5b, 0x03, 0xc6, 0xd3, 0xde, 0xb3, 0x97, 0x64, 0x3e, 0x3f, 0xca, 0x77, 0x91, 0x3b, 0xcb, 0x81, 0x88, 0x83, 0x71, 0xe6, 0xfa, 0x62, 0xd9, 0x38, 0xce, 0x09, 0xd8, 0xf0, 0x79, 0x4f, 0xbf, 0xbd, 0xfc, 0xf7, 0xe5, 0xa4, 0xcc, 0xf7, 0xb5, 0x34, 0x58, 0x15, 0x51, 0x66, 0x4a, 0x91, 0x2b, 0x87, 0xc5, 0xe1, 0xb6, 0xb0, 0x0b, 0xc0, 0xef, 0x8f, 0x25, 0x8d, 0x47, 0xda, 0xc1, 0x37, 0x86, 0xa5, 0x74, 0xdc, 0x4c, 0xa5, 0xa7, 0x8a, 0xbb, 0x57, 0x44, 0x4b, 0x38, 0x75, 0xc0, 0x0b, 0x35, 0x98, 0xdb, 0xeb, 0xac, 0x82, 0x43, 0xcb, 0x57, 0xcd, 0xd1, 0xed, 0xee, 0xf2, 0x77, 0x9f, 0x3c, 0x55, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a]);

// 接口No.2 测试输入
const input_hex_2 = new Uint8Array([0x43, 0x80, 0x02, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0xcc, 0xa2, 0xd0, 0x64, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x00, 0x48, 0x6e, 0x1b, 0x7c, 0x1b, 0x06, 0x02, 0x4e, 0x87, 0xe9, 0x41, 0x4e, 0x31, 0x99, 0x4d, 0xab, 0x5c, 0x5d, 0x75, 0x6f, 0x76, 0xe7, 0xe8, 0xa5, 0x33, 0x60, 0x14, 0xe6, 0xa3, 0xa1, 0xc0, 0xd6, 0x3c, 0x5e, 0x48, 0xe1, 0xe3, 0x5b, 0xd4, 0xba, 0x8a, 0x15, 0xac, 0xdb, 0xfc, 0xc0, 0xc6, 0xf5, 0x72, 0xe3, 0x87, 0x68, 0x9d, 0xef, 0x3d, 0x27, 0x19, 0x2d, 0x8a, 0xcb, 0x9c, 0x9c, 0x2b, 0xd2, 0x7b, 0xc4, 0x63, 0xba, 0xb8, 0xe6, 0xa7, 0x01, 0x03, 0xac, 0xf1, 0x6c, 0x4a, 0x55, 0x50, 0xc2, 0x00, 0x38, 0xf0, 0x27, 0xc9, 0xe0, 0x26, 0x7e, 0xcc, 0xcf, 0xf6, 0x27, 0xcb, 0x11, 0x5c, 0xe4, 0xc5, 0xf3, 0x16, 0xa6, 0x29, 0x65, 0x50, 0x3d, 0xda, 0x45, 0xb2, 0x98, 0x0b, 0xbf, 0xc1, 0x17, 0xc5, 0xdf, 0x69, 0x6a, 0x0b, 0xcc, 0xd9, 0x47, 0xe9, 0xda, 0xc7, 0x28, 0x60, 0x37, 0x9e, 0xa6, 0x0c, 0x89, 0x9f, 0x34, 0xa2, 0x0d, 0x08, 0xb6, 0xe6, 0x5c, 0x95, 0x39, 0xc0, 0x6e, 0x96, 0x24, 0x2c, 0x3a, 0x55, 0xaa, 0xa4, 0x48, 0x1b, 0x08, 0x97, 0xa6, 0xc0, 0x17, 0x2e, 0x02, 0x67, 0x0c, 0xd1, 0x89, 0x0e, 0x65, 0x5f, 0xee, 0xdd, 0xe3, 0x5d, 0x34, 0x37, 0xdd, 0x16, 0x1b, 0x0c, 0x35, 0xd4, 0xcf, 0x5b, 0x01, 0x4c, 0x7d, 0xaa, 0x20, 0x82, 0x0f, 0xe2, 0xe7, 0x81, 0xe3, 0xb8, 0xa0, 0xd3, 0xcc, 0x0b, 0x69, 0xad, 0xb9, 0x97, 0x4b, 0xaf, 0x17, 0x29, 0x32, 0x71, 0x13, 0x38, 0x78, 0x96, 0x6d, 0xc4, 0xf6, 0x84, 0xd1, 0xf0, 0x90, 0xdb, 0x0e, 0xb1, 0x9f, 0x98, 0x0c, 0xcf, 0x33, 0x9b, 0x38, 0x4d, 0x56, 0xf3, 0x79, 0x05, 0xc8, 0x59, 0x94, 0xba, 0xc5, 0xca, 0x2e, 0x92, 0x30, 0xfd, 0xf4, 0x2b, 0xc7, 0xa2, 0x27, 0x3c, 0x06, 0x3a, 0xd8, 0xb0, 0x59, 0xa7, 0x15, 0x79, 0xd4, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a]);

// 接口No.3 测试输入
const input_hex_3 = new Uint8Array([0x43 ,0x80 ,0x03 ,0x00 ,0xA3 ,0x01 ,0x02 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x05 ,0x7E ,0x95 ,0x3D ,0x9C ,0xE6 ,0x33 ,0xFF ,0xDA ,0x11 ,0x5C ,0x65 ,0x73 ,0x64 ,0x34 ,0x33 ,0x31 ,0x39 ,0x64 ,0x62 ,0x33 ,0x39 ,0x39 ,0x37 ,0x61 ,0x62 ,0x33 ,0x66 ,0x37 ,0x37 ,0x31 ,0x38 ,0x30 ,0x35 ,0x38 ,0x33 ,0x38 ,0x32 ,0x65 ,0x32 ,0x63 ,0x63 ,0x64 ,0x61 ,0x34 ,0x36 ,0x37 ,0x38 ,0x64 ,0x34 ,0x39 ,0x64 ,0x36 ,0x31 ,0x33 ,0x37 ,0x38 ,0x30 ,0x36 ,0x38 ,0x64 ,0x76 ,0x00 ,0x3F ,0x77 ,0x76 ,0xD6 ,0xF6 ,0xD1 ,0x69 ,0xF1 ,0x28 ,0xFD ,0xE6 ,0xFD ,0x95 ,0x3E ,0x63 ,0xD5 ,0xFD ,0x67 ,0x2F ,0x3A ,0x3F ,0xBD ,0xC6 ,0x1D ,0x56 ,0xDB ,0x78 ,0x4E ,0xF6 ,0x4B ,0x25 ,0xB2 ,0x60 ,0x3A ,0x3C ,0xF3 ,0x5E ,0xEA ,0xE8 ,0x00 ,0xBE ,0x9D ,0xA5 ,0xEA ,0x17 ,0xE0 ,0x87 ,0x1E ,0xDF ,0xB5 ,0xBE ,0x45 ,0x8A ,0x86 ,0x3A ,0xDC ,0xE6 ,0x31 ,0x15 ,0xF9 ,0x20 ,0xD7 ,0x02 ,0x9C ,0xB2 ,0xEB ,0xAC ,0x5F ,0xD1 ,0x5E ,0x31 ,0x70 ,0x56 ,0x15 ,0xB4 ,0xFF ,0xB7 ,0x3A ,0x61 ,0xB5 ,0xA0 ,0xB4 ,0x04 ,0x94 ,0xA3 ,0x9E ,0x6A ,0x66 ,0x42 ,0x0C ,0x3C ,0x67 ,0x4C ,0x42 ,0x5F ,0x62 ,0xE8 ,0xA6 ,0xF7 ,0xA4 ,0x76 ,0x47 ,0x74 ,0xED ,0x42 ,0xB7 ,0xD8 ,0x79 ,0x09 ,0x58 ,0xBE ,0x76 ,0xFD ,0xA9 ,0xE7 ,0x55 ,0x95 ,0xE3 ,0x1E ,0x8F ,0x6E ,0x9F ,0xDF ,0xF7 ,0x57 ,0xC4 ,0xA0 ,0x36 ,0x20 ,0xFB ,0x01 ,0xEB ,0xF7 ,0x43 ,0xF1 ,0x82 ,0xDE ,0x98 ,0x39 ,0x40 ,0x55 ,0x26 ,0xD8 ,0x71 ,0x88 ,0xDE ,0x80 ,0x2D ,0x47 ,0x2F ,0xBC ,0x0F ,0xE2 ,0xC1 ,0x6F ,0x0B ,0xFA ,0xF7 ,0x3A ,0x24 ,0xAD ,0xF3 ,0xDF ,0x84 ,0x8F ,0x88 ,0xCA ,0xF4 ,0x1F ,0xAF ,0xF3 ,0x86 ,0x6E ,0x65 ,0x55 ,0x5D ,0x0F ,0x4D ,0x29 ,0x91 ,0xDE ,0xB3 ,0xB0 ,0xB6 ,0xBC ,0xF3 ,0xCE ,0x06 ,0xAA ,0x56 ,0x9C ,0x48 ,0xEE ,0x9C ,0x64 ,0x51 ,0x5D ,0x22 ,0xD3 ,0x62 ,0xAC ,0x52 ,0x56 ,0x20 ,0x7D ,0x7C ,0x76 ,0xE2 ,0xF8 ,0xE1 ,0xF5 ,0x80 ,0x10 ,0xBD ,0x0F ,0x78 ,0x14 ,0xB6 ,0xB5 ,0x1C ,0xE0 ,0x1E ,0x45 ,0xB5 ,0x33 ,0x65 ,0x19 ,0x06 ,0x59 ,0xFC ,0x2D ,0x14 ,0x07 ,0xC9 ,0xBE ,0xBF ,0xF1 ,0x20 ,0x6A ,0x60 ,0x63 ,0xBD ,0xBE ,0xF1 ,0xA9 ,0xEC ,0x2D ,0xCA ,0x13 ,0x9D ,0xEB ,0x76 ,0xD4 ,0x42 ,0xFB ,0x26 ,0x00 ,0x00 ,0x01 ,0x08 ,0x01 ,0x00 ,0x61 ,0x31 ,0x79 ,0x6C ,0x56 ,0x38 ,0x4F ,0x72 ,0x30 ,0x59 ,0x4A ,0x41 ,0x42 ,0x3B ,0xD5 ,0x84 ,0xA4 ,0xDE ,0xAF ,0x33 ,0x1E ,0xBB ,0x1B ,0x30 ,0x58 ,0x57 ,0xF8 ,0x09 ,0x05 ,0x5D ,0x0D ,0x80 ,0x0A ,0x76 ,0x32 ,0x65 ,0x63 ,0x34 ,0x37 ,0x30 ,0x31 ,0x33 ,0x35 ,0x31 ,0x30 ,0x38 ,0x63 ,0x63 ,0x37 ,0x65 ,0x35 ,0x34 ,0x61 ,0x36 ,0x39 ,0x30 ,0x31 ,0x39 ,0x33 ,0x66 ,0x30 ,0x61 ,0x66 ,0x37 ,0x33 ,0x62 ,0x31 ,0x31 ,0x66 ,0x63 ,0x32 ,0x35 ,0x66 ,0x36 ,0x66 ,0x33 ,0x37 ,0x64 ,0x63 ,0x34 ,0x38 ,0x31 ,0x70 ,0x00]);

// 接口No.4 测试输入
const input_hex_4 = new Uint8Array([0x43, 0x80, 0x04, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0xcc, 0xa2, 0xd0, 0x64, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x00, 0xce, 0x19, 0xe8, 0x29, 0x22, 0x41, 0xbe, 0x69, 0xd3, 0x53, 0xee, 0x36, 0x9d, 0xb2, 0x26, 0xd3, 0x38, 0xf1, 0x4b, 0x96, 0x23, 0x1f, 0x9b, 0xe5, 0xd6, 0xb5, 0x62, 0x9e, 0x1c, 0xfb, 0x6b, 0xa8, 0x28, 0x9d, 0x6f, 0x0c, 0x4e, 0x82, 0x5e, 0x0c, 0x56, 0xcc, 0x51, 0x64, 0x2f, 0xf4, 0xd8, 0xe0, 0xe9, 0xfe, 0x67, 0x83, 0xcc, 0x7b, 0x1b, 0x6c, 0x3c, 0xc6, 0xf8, 0x4f, 0xaa, 0x38, 0x9d, 0xb4, 0x94, 0x02, 0x41, 0x82, 0x4e, 0xcf, 0xb5, 0x7a, 0x87, 0x47, 0xb6, 0xda, 0x79, 0xd7, 0x51, 0x02, 0xb3, 0xbc, 0xab, 0x1c, 0xa4, 0xb4, 0x6a, 0xf4, 0xf9, 0xc0, 0x9e, 0x6e, 0xec, 0x97, 0x75, 0x61, 0x2f, 0x9b, 0x29, 0x04, 0xb9, 0x26, 0x2b, 0x0d, 0x67, 0x3c, 0x7e, 0x2f, 0x26, 0xfc, 0x65, 0xc1, 0xff, 0xff, 0xe9, 0x5c, 0x7d, 0xf0, 0xec, 0xff, 0xde, 0xca, 0x5e, 0x45, 0x8e, 0x3e, 0x28, 0x59, 0x86, 0x7d, 0x15, 0x94, 0x06, 0x38, 0xc2, 0x79, 0xc6, 0xc2, 0x48, 0x04, 0x5a, 0x59, 0xe8, 0x74, 0xc4, 0x52, 0xb7, 0xa6, 0xba, 0x67, 0xce, 0xef, 0x7f, 0x3f, 0xfb, 0x0d, 0x36, 0x07, 0xd5, 0x89, 0x5c, 0x4a, 0x2d, 0x78, 0xd6, 0xd3, 0x63, 0x16, 0xc0, 0xe9, 0x77, 0x5b, 0xf9, 0x25, 0x1b, 0x5c, 0x53, 0x2a, 0x3a, 0x6b, 0xbf, 0xd3, 0x92, 0x65, 0x9a, 0xd0, 0x36, 0x50, 0xe1, 0xc1, 0xbd, 0x52, 0xcc, 0x79, 0xbd, 0xe9, 0x2a, 0xb4, 0x12, 0x2e, 0x74, 0xe9, 0x95, 0x4e, 0x83, 0x25, 0xc5, 0x0f, 0xd1, 0x1e, 0x1c, 0xf2, 0x2f, 0x1d, 0x5a, 0x1f, 0xe6, 0xc0, 0x0c, 0xc9, 0xa4, 0x96, 0xfe, 0xe1, 0x64, 0x36, 0x8b, 0xe2, 0x34, 0xc4, 0x40, 0xfc, 0xee, 0xc4, 0x50, 0x0f, 0xdd, 0xfe, 0x14, 0x8f, 0x76, 0xbc, 0x54, 0xcc, 0xbf, 0x18, 0x72, 0x83, 0x1e, 0xb4, 0x74, 0x98, 0x3c, 0x0d, 0x64, 0xe0, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a, 0x9a, 0x01, 0x78, 0x00]);

// 接口No.5 测试输入
const input_hex_5 = new Uint8Array([0x43, 0x80, 0x05, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0xcc, 0xa2, 0xd0, 0x64, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x00, 0xce, 0x19, 0xe8, 0x29, 0x22, 0x41, 0xbe, 0x69, 0xd3, 0x53, 0xee, 0x36, 0x9d, 0xb2, 0x26, 0xd3, 0x38, 0xf1, 0x4b, 0x96, 0x23, 0x1f, 0x9b, 0xe5, 0xd6, 0xb5, 0x62, 0x9e, 0x1c, 0xfb, 0x6b, 0xa8, 0x28, 0x9d, 0x6f, 0x0c, 0x4e, 0x82, 0x5e, 0x0c, 0x56, 0xcc, 0x51, 0x64, 0x2f, 0xf4, 0xd8, 0xe0, 0xe9, 0xfe, 0x67, 0x83, 0xcc, 0x7b, 0x1b, 0x6c, 0x3c, 0xc6, 0xf8, 0x4f, 0xaa, 0x38, 0x9d, 0xb4, 0x94, 0x02, 0x41, 0x82, 0x4e, 0xcf, 0xb5, 0x7a, 0x87, 0x47, 0xb6, 0xda, 0x79, 0xd7, 0x51, 0x02, 0xb3, 0xbc, 0xab, 0x1c, 0xa4, 0xb4, 0x6a, 0xf4, 0xf9, 0xc0, 0x9e, 0x6e, 0xec, 0x97, 0x75, 0x61, 0x2f, 0x9b, 0x29, 0x04, 0xb9, 0x26, 0x2b, 0x0d, 0x67, 0x3c, 0x7e, 0x2f, 0x26, 0xfc, 0x65, 0xc1, 0xff, 0xff, 0xe9, 0x5c, 0x7d, 0xf0, 0xec, 0xff, 0xde, 0xca, 0x5e, 0x45, 0x8e, 0x3e, 0x28, 0x59, 0x86, 0x7d, 0x15, 0x94, 0x06, 0x38, 0xc2, 0x79, 0xc6, 0xc2, 0x48, 0x04, 0x5a, 0x59, 0xe8, 0x74, 0xc4, 0x52, 0xb7, 0xa6, 0xba, 0x67, 0xce, 0xef, 0x7f, 0x3f, 0xfb, 0x0d, 0x36, 0x07, 0xd5, 0x89, 0x5c, 0x4a, 0x2d, 0x78, 0xd6, 0xd3, 0x63, 0x16, 0xc0, 0xe9, 0x77, 0x5b, 0xf9, 0x25, 0x1b, 0x5c, 0x53, 0x2a, 0x3a, 0x6b, 0xbf, 0xd3, 0x92, 0x65, 0x9a, 0xd0, 0x36, 0x50, 0xe1, 0xc1, 0xbd, 0x52, 0xcc, 0x79, 0xbd, 0xe9, 0x2a, 0xb4, 0x12, 0x2e, 0x74, 0xe9, 0x95, 0x4e, 0x83, 0x25, 0xc5, 0x0f, 0xd1, 0x1e, 0x1c, 0xf2, 0x2f, 0x1d, 0x5a, 0x1f, 0xe6, 0xc0, 0x0c, 0xc9, 0xa4, 0x96, 0xfe, 0xe1, 0x64, 0x36, 0x8b, 0xe2, 0x34, 0xc4, 0x40, 0xfc, 0xee, 0xc4, 0x50, 0x0f, 0xdd, 0xfe, 0x14, 0x8f, 0x76, 0xbc, 0x54, 0xcc, 0xbf, 0x18, 0x72, 0x83, 0x1e, 0xb4, 0x74, 0x98, 0x3c, 0x0d, 0x64, 0xe0, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a, 0x9a, 0x01, 0x78, 0x00]);

// 接口No.6 测试输入
const input_hex_6 = new Uint8Array([0x43, 0x80, 0x06, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0xcc, 0xa2, 0xd0, 0x64, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x00, 0xb2, 0x06, 0xc2, 0x95, 0x86, 0x41, 0xa1, 0x0c, 0xa1, 0x8d, 0x88, 0x27, 0xa1, 0x21, 0x3d, 0xba, 0x12, 0x19, 0x71, 0x08, 0x3c, 0xec, 0xd2, 0xec, 0x72, 0xea, 0x8d, 0x77, 0x34, 0x7a, 0x1c, 0x05, 0xcd, 0xc2, 0x39, 0x46, 0x29, 0x4f, 0x4e, 0xcf, 0x0f, 0xa5, 0xbf, 0x2d, 0xac, 0xbe, 0xb7, 0xa1, 0xb9, 0x91, 0x3c, 0x74, 0x96, 0x67, 0x00, 0xbc, 0x54, 0xaf, 0x7d, 0xc4, 0x64, 0xbe, 0x52, 0x10, 0x54, 0x04, 0x6d, 0xdd, 0x91, 0x16, 0xfe, 0x68, 0x41, 0xa6, 0xa9, 0x21, 0x75, 0xf0, 0x51, 0x3a, 0x41, 0x5e, 0x01, 0xb1, 0x93, 0xa2, 0x82, 0x1a, 0x06, 0xf5, 0xdb, 0x18, 0x67, 0x3c, 0x38, 0x20, 0xbd, 0xf4, 0xa3, 0x73, 0x5e, 0xce, 0x6b, 0x12, 0x2b, 0x9d, 0x6e, 0xe1, 0xad, 0xa0, 0x2e, 0xa6, 0x25, 0x94, 0x0f, 0x85, 0xd2, 0xae, 0xd0, 0x7a, 0x58, 0x84, 0x87, 0xe2, 0xdd, 0x7e, 0x7f, 0xa2, 0xd7, 0xbd, 0x89, 0x2d, 0x14, 0x72, 0x0c, 0xff, 0xc5, 0xbc, 0x41, 0xb8, 0xf1, 0x7a, 0x06, 0x5e, 0x3f, 0xdb, 0x4c, 0x31, 0x53, 0x2b, 0x75, 0x33, 0x8e, 0x77, 0xc8, 0xf6, 0x5c, 0xca, 0xbd, 0xad, 0x2d, 0x6f, 0x72, 0x09, 0x47, 0xe5, 0x03, 0x0d, 0xff, 0x8e, 0x95, 0x0a, 0x19, 0x13, 0x5e, 0x50, 0xa0, 0x67, 0x25, 0x11, 0x4d, 0xc0, 0xd9, 0x3f, 0xcf, 0xb5, 0x2b, 0x60, 0x84, 0x6c, 0xb2, 0x47, 0x91, 0xd9, 0x9d, 0xac, 0x99, 0x44, 0x62, 0xa0, 0x87, 0xf5, 0x1c, 0x71, 0x78, 0x2d, 0xc9, 0x77, 0xf6, 0x86, 0x72, 0x3f, 0xc7, 0x67, 0x79, 0xd5, 0x76, 0x4c, 0x4a, 0xc0, 0x40, 0xed, 0x73, 0x1a, 0xba, 0x14, 0xcf, 0xd3, 0x62, 0x9c, 0x7e, 0x56, 0x6b, 0x44, 0x58, 0xe1, 0x59, 0x6e, 0x9e, 0x18, 0xca, 0x90, 0xdc, 0xaa, 0x0c, 0x60, 0x02, 0x9d, 0xad, 0xa0, 0xdf, 0x7b, 0x1d, 0xa5, 0x64, 0x34, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a, 0x35, 0x43, 0x46, 0x34, 0x44, 0x41, 0x31, 0x46, 0x30, 0x36, 0x44, 0x32, 0x41, 0x42, 0x33, 0x41]);

// 接口No.7 测试输入
const input_hex_7 = new Uint8Array([0x43, 0x80, 0x07, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0xcc, 0xa2, 0xd0, 0x64, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x00, 0xb6, 0x7b, 0xd7, 0x86, 0xf9, 0x9b, 0x00, 0x3f, 0x38, 0xed, 0x7e, 0x5d, 0xc6, 0xa0, 0x8d, 0xb3, 0xb6, 0x0c, 0xee, 0x42, 0x3f, 0xd6, 0x6d, 0xaf, 0x70, 0x95, 0xf0, 0x3a, 0xf9, 0x7e, 0x01, 0x7f, 0xf3, 0x06, 0x01, 0x46, 0x6b, 0xa3, 0xec, 0x78, 0xaf, 0x44, 0xac, 0x65, 0x86, 0x81, 0x52, 0xf7, 0x51, 0x2f, 0xc7, 0xd5, 0x31, 0xfd, 0x77, 0xfc, 0x5f, 0xa9, 0x18, 0xe0, 0x5b, 0xed, 0x3b, 0x12, 0x41, 0x23, 0x8d, 0xd1, 0xaa, 0xff, 0x81, 0x4c, 0x38, 0xec, 0xc2, 0x50, 0xc6, 0xf5, 0xcf, 0x17, 0xe5, 0x82, 0xab, 0x96, 0x9d, 0xfe, 0x74, 0xb9, 0xd3, 0xbf, 0x0b, 0x62, 0x2e, 0x03, 0xa3, 0xaa, 0x41, 0x3a, 0x52, 0xe2, 0x80, 0x86, 0x4f, 0xf1, 0xef, 0x61, 0x88, 0x6a, 0x0e, 0x9e, 0x6e, 0x3a, 0x2e, 0x81, 0x9e, 0x30, 0x4e, 0xdf, 0x71, 0x1e, 0xcb, 0x36, 0x55, 0xb8, 0xb6, 0x9c, 0x43, 0xef, 0x8c, 0x20, 0xc1, 0xd1, 0xbd, 0x6d, 0x68, 0x6b, 0x70, 0xb8, 0x1c, 0xee, 0xfc, 0xf9, 0xc9, 0xbd, 0x33, 0xd2, 0xdd, 0xfd, 0xad, 0xf8, 0x7c, 0x15, 0x9a, 0xc5, 0xd5, 0x0c, 0x8d, 0x09, 0x24, 0x5f, 0x86, 0x3f, 0x04, 0x2e, 0x7f, 0x00, 0xc7, 0x7b, 0x3a, 0xa0, 0xed, 0xb4, 0x5a, 0x10, 0xc5, 0xeb, 0x26, 0x63, 0xa0, 0x63, 0x99, 0xdf, 0x65, 0xff, 0x24, 0x71, 0xf2, 0x91, 0xfd, 0x87, 0x81, 0x18, 0x92, 0xa5, 0x3b, 0xc7, 0xe8, 0x3b, 0x87, 0x57, 0x38, 0x5d, 0xcf, 0xd4, 0x28, 0xb2, 0x2e, 0x2e, 0xdb, 0x31, 0xa5, 0xb9, 0xfe, 0x7e, 0xcb, 0x63, 0x07, 0xed, 0x37, 0x41, 0xe2, 0xb4, 0xad, 0x31, 0xce, 0xa7, 0xc9, 0x7e, 0x59, 0xe4, 0x60, 0xc0, 0xea, 0xbe, 0x50, 0x79, 0x52, 0x39, 0x62, 0xa2, 0xd8, 0x6b, 0x3c, 0x50, 0x71, 0xa3, 0xe0, 0x08, 0xab, 0x71, 0x6c, 0x9d, 0x3e, 0x16, 0x66, 0xd5, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a, 0x35, 0x43, 0x46, 0x34, 0x44, 0x41, 0x31, 0x46, 0x30, 0x36, 0x44, 0x32, 0x41, 0x42, 0x33, 0x41, 0x0a, 0x00, 0x00, 0x00]);

// 接口No.8 测试输入
const input_hex_8 = new Uint8Array([0x43, 0x80, 0x08, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0xcc, 0xa2, 0xd0, 0x64, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x00, 0x1f, 0xb5, 0x30, 0x05, 0x91, 0x8f, 0x70, 0x76, 0xc9, 0x2e, 0x7a, 0xab, 0x85, 0xf6, 0x28, 0x1d, 0x45, 0xa4, 0x82, 0xc3, 0x0f, 0x6c, 0xe9, 0xc9, 0xa7, 0x12, 0xe7, 0x27, 0x51, 0xea, 0x15, 0x47, 0x80, 0xbe, 0xfc, 0xfd, 0xf3, 0x46, 0x61, 0x0b, 0x29, 0x35, 0xf1, 0xd2, 0xab, 0x37, 0xc4, 0x53, 0x63, 0x97, 0xb7, 0x59, 0xef, 0x15, 0x8f, 0x8e, 0x63, 0x04, 0xb4, 0x66, 0xad, 0xba, 0x20, 0x22, 0x3c, 0x8e, 0x48, 0x2d, 0x88, 0x68, 0x42, 0x30, 0xf9, 0xa4, 0x45, 0xfa, 0x8b, 0xb9, 0x57, 0x56, 0xe7, 0xd4, 0x7a, 0x6f, 0x18, 0xda, 0x31, 0xf8, 0xed, 0x44, 0x08, 0x23, 0xc8, 0x54, 0xe0, 0x2e, 0xf0, 0x1f, 0xed, 0x7c, 0xf6, 0x2f, 0xc0, 0xa5, 0x2a, 0xcb, 0x78, 0x4b, 0xd5, 0x24, 0x35, 0x59, 0x08, 0xb8, 0x99, 0xd7, 0xc6, 0x8f, 0xe1, 0x2c, 0x0f, 0xe0, 0xb6, 0x5e, 0x13, 0x1b, 0xb4, 0xca, 0xa2, 0xc0, 0x51, 0xa3, 0x0f, 0x36, 0x5e, 0x15, 0x28, 0xac, 0x90, 0x7f, 0xd8, 0xfb, 0xf0, 0x8c, 0x2d, 0xdb, 0x31, 0xa6, 0x78, 0x76, 0xbb, 0x3c, 0xaf, 0x5a, 0xc0, 0xd7, 0x54, 0x59, 0x8a, 0x67, 0x3e, 0xe4, 0x49, 0x2d, 0xec, 0x36, 0xfe, 0xde, 0x2f, 0x30, 0x01, 0x8e, 0x3b, 0x21, 0x16, 0xdb, 0x2b, 0xa9, 0xcf, 0xea, 0xd4, 0x84, 0x51, 0x54, 0x9a, 0xf3, 0x10, 0x5f, 0x30, 0x6c, 0x37, 0x95, 0x15, 0xed, 0x1b, 0x8e, 0x90, 0x19, 0x95, 0x6c, 0xb0, 0x22, 0x9e, 0x7a, 0x24, 0x1e, 0xa6, 0xf6, 0x19, 0xaa, 0x61, 0x38, 0xfd, 0x43, 0xcd, 0x8c, 0x6a, 0xa1, 0x31, 0x20, 0x79, 0xd6, 0x52, 0x23, 0x1d, 0x1d, 0x60, 0xbb, 0x1d, 0x10, 0x1e, 0x86, 0x35, 0xbd, 0x19, 0xd7, 0x17, 0x62, 0x59, 0x59, 0x3e, 0x3c, 0xc9, 0xdd, 0x06, 0x81, 0x85, 0x6d, 0x83, 0xef, 0xb3, 0x53, 0x2a, 0x0a, 0x45, 0x76, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a, 0xc2, 0x01, 0x78, 0x00]);

// 接口No.9 测试输入
const input_hex_9 = new Uint8Array([0x43, 0x80, 0x09, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0xcc, 0xa2, 0xd0, 0x64, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x00, 0x9c, 0x2a, 0xd9, 0xea, 0x05, 0x33, 0xd7, 0xb7, 0xcb, 0x1d, 0x01, 0x8c, 0x66, 0xae, 0x80, 0x07, 0xeb, 0xf6, 0xca, 0xac, 0xec, 0x48, 0xad, 0xa7, 0xec, 0x6d, 0xb1, 0xa6, 0x61, 0x94, 0x9c, 0x7c, 0x30, 0x86, 0xd8, 0x92, 0x57, 0x0d, 0x80, 0xbf, 0x19, 0xe0, 0x1f, 0xf4, 0x54, 0xb5, 0x1c, 0x77, 0xdf, 0xcc, 0xcc, 0x6a, 0x69, 0x3c, 0x63, 0x32, 0xbc, 0x53, 0x6a, 0xaa, 0x28, 0x83, 0xfa, 0x39, 0x7d, 0x20, 0xd9, 0xe1, 0x51, 0xb8, 0x62, 0x37, 0xb9, 0x95, 0xad, 0xbe, 0xf2, 0x76, 0xca, 0xa5, 0x47, 0xce, 0x76, 0xfb, 0xd4, 0xf5, 0x16, 0x9c, 0x0c, 0xf6, 0x43, 0x4e, 0x03, 0x63, 0x90, 0x21, 0x38, 0x21, 0xb8, 0xeb, 0x53, 0x6b, 0x29, 0x29, 0xc6, 0x63, 0x54, 0x9e, 0xbf, 0x34, 0xce, 0xaf, 0x57, 0x6e, 0x41, 0xab, 0xd7, 0x23, 0xf5, 0xd1, 0x00, 0x39, 0x79, 0x07, 0x68, 0x05, 0x78, 0x3e, 0xa5, 0xb0, 0x48, 0x44, 0x2e, 0xaf, 0xc8, 0x87, 0x9d, 0xc3, 0x0f, 0xf2, 0x6d, 0x13, 0x01, 0xca, 0x81, 0xe7, 0xa8, 0x66, 0x8e, 0x76, 0xe4, 0x72, 0x49, 0x26, 0xfe, 0xe4, 0x70, 0x0a, 0xe6, 0xc8, 0xa4, 0xb0, 0xe4, 0x37, 0x9a, 0x36, 0x04, 0x71, 0xdb, 0x8c, 0x7d, 0x8b, 0x93, 0xcf, 0xb2, 0x06, 0xf0, 0xa2, 0xa5, 0xa0, 0x30, 0x69, 0x38, 0xf5, 0x59, 0x8b, 0x3c, 0x45, 0x25, 0xb3, 0x38, 0x93, 0x49, 0x2a, 0xaf, 0x05, 0x99, 0x3e, 0x4a, 0xfe, 0x82, 0x26, 0xdc, 0x61, 0x43, 0x23, 0xcb, 0xa3, 0x2d, 0x55, 0x9e, 0x98, 0x3a, 0x6e, 0x5a, 0xea, 0xe6, 0xea, 0x70, 0x22, 0x45, 0xb9, 0x7b, 0xdc, 0x7e, 0x79, 0x58, 0x6a, 0x22, 0x55, 0x06, 0x26, 0x12, 0xd3, 0xf8, 0x2f, 0xd4, 0x32, 0x4a, 0x60, 0xc1, 0xdf, 0x9e, 0xa4, 0x70, 0xf4, 0x1e, 0xc7, 0x45, 0x62, 0xe4, 0x0c, 0x08, 0xff, 0xa4, 0x18, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a, 0x35, 0x43, 0x46, 0x34, 0x44, 0x41, 0x31, 0x46, 0x30, 0x36, 0x44, 0x32, 0x41, 0x42, 0x33, 0x41, 0x08]);

// 接口No.10 测试输入
const input_hex_a = new Uint8Array([0x43, 0x80, 0x0a, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0xcc, 0xa2, 0xd0, 0x64, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x00, 0xbb, 0x74, 0xe8, 0x1c, 0x14, 0x5c, 0x5a, 0x0a, 0xc5, 0x74, 0xf6, 0xba, 0x41, 0x90, 0x82, 0xa7, 0x02, 0xf2, 0x79, 0x3d, 0xf3, 0x4a, 0xae, 0xe0, 0xbe, 0x9f, 0xa4, 0x53, 0xaf, 0xf1, 0xb7, 0xcb, 0x1d, 0xa1, 0xe2, 0xa2, 0x3b, 0xec, 0x09, 0xa3, 0x20, 0xa7, 0xd3, 0xd8, 0x5b, 0x7e, 0xe2, 0x0b, 0x37, 0xf4, 0x1a, 0x21, 0x03, 0xa1, 0xa0, 0x1e, 0x97, 0x86, 0xd9, 0x64, 0x73, 0xd5, 0x39, 0xa6, 0xc2, 0x80, 0x57, 0x46, 0x12, 0x8e, 0x26, 0xc8, 0x76, 0x5a, 0x6a, 0x8f, 0xc3, 0xc3, 0xdd, 0x85, 0x28, 0x36, 0x68, 0xd6, 0x68, 0x3f, 0x67, 0x51, 0xc0, 0xd6, 0xf9, 0xcb, 0xad, 0x20, 0x1d, 0x80, 0xf4, 0xff, 0x62, 0x63, 0x29, 0x14, 0x94, 0x95, 0xd5, 0x83, 0x58, 0x4a, 0xff, 0x08, 0xd0, 0xa6, 0x24, 0x20, 0x02, 0xf5, 0x40, 0xce, 0xab, 0xa9, 0x26, 0xdc, 0x53, 0x3b, 0x0c, 0x25, 0x7a, 0x00, 0xe6, 0x34, 0x60, 0x56, 0x95, 0xde, 0x6c, 0xae, 0xe9, 0xd6, 0xeb, 0x45, 0x42, 0xac, 0xad, 0x88, 0x59, 0x98, 0x2e, 0xa9, 0xc4, 0xf2, 0xd8, 0xf0, 0x87, 0x1a, 0x8e, 0x3e, 0xed, 0x11, 0xa2, 0xb2, 0x86, 0xc8, 0xae, 0x00, 0x70, 0xd4, 0x99, 0xf6, 0x91, 0x43, 0xb7, 0xcf, 0xd8, 0x91, 0x68, 0xd1, 0x18, 0x2a, 0x7c, 0x40, 0x96, 0xb6, 0xc9, 0x49, 0xf2, 0x99, 0x04, 0x94, 0xb6, 0x97, 0x7f, 0x73, 0x30, 0x54, 0xfa, 0x6e, 0x8d, 0x9c, 0x7b, 0xe9, 0xb0, 0xe9, 0x01, 0x8c, 0xbd, 0xf8, 0xf8, 0x1e, 0xec, 0xd2, 0x0d, 0x78, 0x54, 0xef, 0x9e, 0xfb, 0xd2, 0xbe, 0x5e, 0xb1, 0x06, 0xaf, 0xd8, 0x79, 0x68, 0x45, 0xfe, 0xfe, 0x5d, 0xbe, 0x82, 0x99, 0x08, 0x1b, 0x43, 0x1d, 0x04, 0x80, 0x08, 0xf1, 0x8e, 0x95, 0xa3, 0x27, 0xa1, 0x28, 0xf8, 0x0a, 0xbc, 0xa9, 0x69, 0x8c, 0x14, 0xc1, 0xe9, 0xa0, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a, 0x35, 0x43, 0x46, 0x34, 0x44, 0x41, 0x31, 0x46, 0x30, 0x36, 0x44, 0x32, 0x41, 0x42, 0x33, 0x41, ]);

// 接口No.11 测试输入
const input_hex_b = new Uint8Array([0x43, 0x80, 0x0b, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0xcc, 0xa2, 0xd0, 0x64, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x00, 0x8b, 0x58, 0xbb, 0x46, 0x2d, 0x67, 0x8e, 0x94, 0x15, 0xc6, 0xbb, 0x3c, 0xa0, 0x19, 0xd0, 0x36, 0xbc, 0x3b, 0x21, 0x27, 0x43, 0x84, 0xaf, 0x8d, 0x8b, 0xb3, 0xdf, 0x09, 0x8b, 0xfc, 0xea, 0x05, 0x2d, 0x1a, 0x1e, 0x9e, 0x8d, 0x9b, 0x19, 0x9a, 0xae, 0xd1, 0xce, 0x0e, 0xee, 0x22, 0xb0, 0x85, 0x96, 0x2d, 0x41, 0xec, 0xfa, 0x87, 0x66, 0x17, 0xea, 0xe6, 0xfc, 0x53, 0x82, 0x3e, 0x83, 0x81, 0x45, 0x3b, 0xe8, 0xa4, 0xc3, 0xac, 0x5a, 0x00, 0xf4, 0x5c, 0x4d, 0x90, 0x0a, 0x5f, 0x9e, 0x35, 0xab, 0xdb, 0xcb, 0xb2, 0xde, 0xe2, 0x29, 0x54, 0xb1, 0xab, 0x3c, 0x6c, 0xd3, 0x87, 0x3a, 0x7d, 0x5e, 0x23, 0x42, 0x34, 0x01, 0x50, 0x2b, 0x1c, 0x56, 0x10, 0xd3, 0xcf, 0x29, 0x23, 0x4d, 0x3e, 0xf5, 0xc7, 0x6a, 0xfc, 0xaa, 0x89, 0x4f, 0x88, 0x8d, 0x37, 0xe1, 0xae, 0x8a, 0x3c, 0xb8, 0x8a, 0x8e, 0x35, 0xd6, 0x2c, 0x79, 0xfe, 0x9c, 0xca, 0xe7, 0x72, 0x00, 0x26, 0xfa, 0xb7, 0x05, 0xae, 0xe6, 0x73, 0x73, 0xa9, 0xe1, 0xda, 0xe0, 0xed, 0x8a, 0x6b, 0x7c, 0xa5, 0x9c, 0x1d, 0xd5, 0xbb, 0x13, 0x9e, 0x5c, 0x8c, 0x44, 0x81, 0x9d, 0xae, 0x54, 0xa7, 0xe1, 0xbb, 0xdd, 0xe9, 0xd3, 0x46, 0xaf, 0xfb, 0xef, 0x5a, 0x02, 0x53, 0x2f, 0xd2, 0x14, 0x34, 0xe4, 0x7c, 0xae, 0x6f, 0xc8, 0x10, 0xb4, 0x46, 0x3a, 0xde, 0x05, 0x70, 0x52, 0x46, 0xd9, 0x3b, 0x4f, 0x9f, 0x82, 0x36, 0x12, 0x4d, 0x8a, 0xb4, 0xad, 0x10, 0xeb, 0x0e, 0xe5, 0x38, 0x3a, 0xb6, 0x3e, 0xfb, 0xf3, 0x70, 0xc5, 0xe8, 0xbd, 0x83, 0x71, 0xb8, 0x59, 0x28, 0x7c, 0x61, 0x8c, 0x03, 0xe6, 0x43, 0x6c, 0xf2, 0x9a, 0x18, 0x8d, 0x53, 0x75, 0x98, 0x16, 0xdb, 0x8d, 0x6b, 0x5c, 0xd3, 0xb2, 0x45, 0x9d, 0x84, 0x23, 0xbd, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a]);

// 接口No.12 测试输入
const input_hex_c = new Uint8Array([0x43, 0x80, 0x0c, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0xcc, 0xa2, 0xd0, 0x64, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x00, 0x24, 0xe5, 0xab, 0xcb, 0x4e, 0x58, 0xe1, 0xd7, 0xf8, 0xe2, 0x8d, 0xb5, 0x0e, 0xd2, 0xaa, 0x48, 0x15, 0xa9, 0xde, 0x4e, 0xd8, 0x21, 0xe9, 0x82, 0x30, 0xe9, 0x3f, 0x4c, 0xc8, 0xe7, 0x90, 0xb1, 0x23, 0x2f, 0x59, 0xb9, 0xc9, 0xb6, 0xb9, 0x51, 0x0a, 0x64, 0x77, 0x66, 0xd4, 0x5c, 0xc7, 0xd0, 0x2b, 0x36, 0xde, 0x79, 0xd1, 0x2f, 0x52, 0xf6, 0xf8, 0x23, 0x1f, 0x9c, 0x9d, 0x0f, 0x9d, 0x5e, 0xa1, 0x92, 0xea, 0x37, 0x7c, 0x7a, 0xcd, 0xac, 0x8d, 0xc1, 0xc7, 0x2a, 0x43, 0xa9, 0x25, 0xc8, 0x97, 0xde, 0xc3, 0x71, 0xfc, 0x6e, 0x98, 0xb4, 0xec, 0x8e, 0x2f, 0x63, 0x39, 0xca, 0x35, 0xb3, 0x8d, 0x25, 0x4c, 0x0e, 0x3d, 0xa4, 0x6f, 0x82, 0xfd, 0x11, 0x22, 0x22, 0xb8, 0x35, 0x7a, 0x9d, 0xc6, 0x15, 0x9b, 0x18, 0xa4, 0xf2, 0x47, 0x6d, 0xe6, 0x26, 0x12, 0x7c, 0x7e, 0xfa, 0x76, 0xfb, 0xe6, 0xb4, 0x62, 0x72, 0xb8, 0x40, 0xd0, 0xe3, 0xc7, 0x85, 0xa9, 0x80, 0x49, 0x72, 0x62, 0x57, 0xc4, 0x5a, 0x18, 0x2c, 0xba, 0xfa, 0xff, 0x4a, 0x43, 0x23, 0xbe, 0x30, 0xcc, 0x16, 0x66, 0x27, 0x1b, 0xb3, 0x59, 0xaf, 0x0b, 0x30, 0xa3, 0xe2, 0xbd, 0x5a, 0x1a, 0xea, 0x59, 0x49, 0xe7, 0x0b, 0xc5, 0xa5, 0xb5, 0xc5, 0xf3, 0x5f, 0xb3, 0x92, 0x68, 0xa0, 0xab, 0x08, 0xfa, 0x4f, 0x5e, 0xe5, 0xe6, 0x1a, 0x61, 0x34, 0xf1, 0x43, 0xc5, 0x2d, 0xf3, 0x93, 0x76, 0x31, 0x27, 0xfd, 0xd1, 0x40, 0x11, 0xcf, 0x72, 0xe1, 0x93, 0x07, 0x92, 0xd4, 0x23, 0x6d, 0xe7, 0x40, 0x0e, 0xe1, 0x14, 0xf5, 0x61, 0xb0, 0x95, 0xd7, 0x7a, 0x59, 0xe0, 0x3c, 0xab, 0x12, 0x15, 0x8e, 0xa3, 0x63, 0xd1, 0xab, 0x61, 0xa9, 0xf9, 0xbe, 0xfa, 0x12, 0x32, 0xe9, 0xee, 0x1c, 0x1d, 0x9b, 0x53, 0xcf, 0x39, 0x4b, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a, 0x35, 0x43, 0x46, 0x34, 0x44, 0x41, 0x31, 0x46, 0x30, 0x36, 0x44, 0x32, 0x41, 0x42, 0x33, 0x41]);

// 接口No.13 测试输入
const input_hex_d = new Uint8Array([0x43, 0x80, 0x0d, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0xcc, 0xa2, 0xd0, 0x64, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x00, 0x61, 0x33, 0x59, 0x67, 0x56, 0x6f, 0x6e, 0x4e, 0x39, 0x45, 0x76, 0x38, 0x2f, 0x46, 0x78, 0x74, 0x6b, 0x63, 0x58, 0x74, 0x64, 0x45, 0x57, 0x54, 0x58, 0x62, 0x51, 0x44, 0x71, 0x69, 0x45, 0x58, 0x38, 0x77, 0x6c, 0x49, 0x5a, 0x72, 0x59, 0x56, 0x72, 0x4f, 0x71, 0x5a, 0x67, 0x78, 0x71, 0x2b, 0x4c, 0x32, 0x38, 0x64, 0x7a, 0x65, 0x36, 0x77, 0x5a, 0x70, 0x43, 0x74, 0x55, 0x58, 0x36, 0x6c, 0x6c, 0x38, 0x67, 0x5a, 0x75, 0x4c, 0x54, 0x38, 0x73, 0x73, 0x4b, 0x69, 0x69, 0x70, 0x6d, 0x50, 0x39, 0x6d, 0x6e, 0x36, 0x6b, 0x61, 0x6c, 0x39, 0x74, 0x6b, 0x46, 0x69, 0x58, 0x6c, 0x71, 0x36, 0x6a, 0x6c, 0x52, 0x50, 0x37, 0x62, 0x37, 0x39, 0x44, 0x7a, 0x32, 0x6e, 0x72, 0x6f, 0x74, 0x36, 0x70, 0x6e, 0x4e, 0x4a, 0x65, 0x45, 0x57, 0x64, 0x4e, 0x59, 0x77, 0x68, 0x45, 0x4c, 0x41, 0x54, 0x42, 0x44, 0x44, 0x37, 0x72, 0x69, 0x6a, 0x66, 0x6c, 0x68, 0x54, 0x4c, 0x49, 0x79, 0x76, 0x6f, 0x4f, 0x6b, 0x47, 0x44, 0x6e, 0x68, 0x64, 0x4f, 0x77, 0x2f, 0x71, 0x31, 0x6b, 0x52, 0x4d, 0x69, 0x48, 0x66, 0x43, 0x38, 0x71, 0x72, 0x58, 0x35, 0x34, 0x76, 0x57, 0x62, 0x5a, 0x69, 0x4e, 0x2f, 0x35, 0x69, 0x5a, 0x4f, 0x52, 0x62, 0x2f, 0x54, 0x34, 0x62, 0x51, 0x43, 0x78, 0x6d, 0x43, 0x71, 0x6d, 0x6e, 0x6c, 0x5a, 0x50, 0x79, 0x33, 0x51, 0x62, 0x49, 0x56, 0x55, 0x4e, 0x35, 0x44, 0x4f, 0x46, 0x70, 0x77, 0x36, 0x42, 0x4e, 0x42, 0x36, 0x34, 0x41, 0x67, 0x4d, 0x66, 0x79, 0x6c, 0x51, 0x7a, 0x39, 0x39, 0x79, 0x34, 0x31, 0x44, 0x33, 0x75, 0x63, 0x58, 0x39, 0x62, 0x51, 0x6c, 0x44, 0x34, 0x45, 0x4a, 0x32, 0x30, 0x35, 0x2f, 0x6b, 0x67, 0x6d, 0x30, 0x6d, 0x70, 0x45, 0x39, 0x2b, 0x54, 0x59, 0x44, 0x47, 0x64, 0x6d, 0x2b, 0x58, 0x69, 0x30, 0x6a, 0x54, 0x35, 0x34, 0x2b, 0x55, 0x6b, 0x48, 0x36, 0x61, 0x71, 0x4a, 0x72, 0x55, 0x76, 0x64, 0x56, 0x56, 0x7a, 0x50, 0x32, 0x54, 0x6f, 0x4a, 0x6f, 0x78, 0x4a, 0x6d, 0x70, 0x30, 0x4a, 0x77, 0x43, 0x56, 0x6e, 0x4a, 0x58, 0x4d, 0x79, 0x47, 0x70, 0x6f, 0x31, 0x45, 0x2b, 0x5a, 0x34, 0x61, 0x53, 0x6d, 0x4d, 0x73, 0x33, 0x51, 0x31, 0x7a, 0x54, 0x32, 0x75, 0x72, 0x53, 0x4f, 0x63, 0x74, 0x45, 0x30, 0x41, 0x59, 0x4d, 0x5a, 0x67, 0x45, 0x6c, 0x61, 0x39, 0x67, 0x3d, 0x3d, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a, 0x35, 0x43, 0x46, 0x34, 0x44, 0x41, 0x31, 0x46, 0x30, 0x36, 0x44, 0x32, 0x41, 0x42, 0x33, 0x41]);

// 接口No.14 测试输入
const input_hex_e = new Uint8Array([0x43, 0x80, 0x0e, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0xcc, 0xa2, 0xd0, 0x64, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x00, 0xbb, 0x74, 0xe8, 0x1c, 0x14, 0x5c, 0x5a, 0x0a, 0xc5, 0x74, 0xf6, 0xba, 0x41, 0x90, 0x82, 0xa7, 0x02, 0xf2, 0x79, 0x3d, 0xf3, 0x4a, 0xae, 0xe0, 0xbe, 0x9f, 0xa4, 0x53, 0xaf, 0xf1, 0xb7, 0xcb, 0x1d, 0xa1, 0xe2, 0xa2, 0x3b, 0xec, 0x09, 0xa3, 0x20, 0xa7, 0xd3, 0xd8, 0x5b, 0x7e, 0xe2, 0x0b, 0x37, 0xf4, 0x1a, 0x21, 0x03, 0xa1, 0xa0, 0x1e, 0x97, 0x86, 0xd9, 0x64, 0x73, 0xd5, 0x39, 0xa6, 0xc2, 0x80, 0x57, 0x46, 0x12, 0x8e, 0x26, 0xc8, 0x76, 0x5a, 0x6a, 0x8f, 0xc3, 0xc3, 0xdd, 0x85, 0x28, 0x36, 0x68, 0xd6, 0x68, 0x3f, 0x67, 0x51, 0xc0, 0xd6, 0xf9, 0xcb, 0xad, 0x20, 0x1d, 0x80, 0xf4, 0xff, 0x62, 0x63, 0x29, 0x14, 0x94, 0x95, 0xd5, 0x83, 0x58, 0x4a, 0xff, 0x08, 0xd0, 0xa6, 0x24, 0x20, 0x02, 0xf5, 0x40, 0xce, 0xab, 0xa9, 0x26, 0xdc, 0x53, 0x3b, 0x0c, 0x25, 0x7a, 0x00, 0xe6, 0x34, 0x60, 0x56, 0x95, 0xde, 0x6c, 0xae, 0xe9, 0xd6, 0xeb, 0x45, 0x42, 0xac, 0xad, 0x88, 0x59, 0x98, 0x2e, 0xa9, 0xc4, 0xf2, 0xd8, 0xf0, 0x87, 0x1a, 0x8e, 0x3e, 0xed, 0x11, 0xa2, 0xb2, 0x86, 0xc8, 0xae, 0x00, 0x70, 0xd4, 0x99, 0xf6, 0x91, 0x43, 0xb7, 0xcf, 0xd8, 0x91, 0x68, 0xd1, 0x18, 0x2a, 0x7c, 0x40, 0x96, 0xb6, 0xc9, 0x49, 0xf2, 0x99, 0x04, 0x94, 0xb6, 0x97, 0x7f, 0x73, 0x30, 0x54, 0xfa, 0x6e, 0x8d, 0x9c, 0x7b, 0xe9, 0xb0, 0xe9, 0x01, 0x8c, 0xbd, 0xf8, 0xf8, 0x1e, 0xec, 0xd2, 0x0d, 0x78, 0x54, 0xef, 0x9e, 0xfb, 0xd2, 0xbe, 0x5e, 0xb1, 0x06, 0xaf, 0xd8, 0x79, 0x68, 0x45, 0xfe, 0xfe, 0x5d, 0xbe, 0x82, 0x99, 0x08, 0x1b, 0x43, 0x1d, 0x04, 0x80, 0x08, 0xf1, 0x8e, 0x95, 0xa3, 0x27, 0xa1, 0x28, 0xf8, 0x0a, 0xbc, 0xa9, 0x69, 0x8c, 0x14, 0xc1, 0xe9, 0xa0, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a, 0x35, 0x43, 0x46, 0x34, 0x44, 0x41, 0x31, 0x46, 0x30, 0x36, 0x44, 0x32, 0x41, 0x42, 0x33, 0x41, ]);

// 接口No.15 测试输入
const input_hex_f = new Uint8Array([0x43, 0x80, 0x0f, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0x10, 0xB8, 0xDC, 0xF6, 0xA4, 0xB5, 0x55, 0x01, 0x42, 0xDE, 0x61, 0x40, 0x22, 0xAE, 0x7F, 0x11, 0x24, 0xe5, 0xab, 0xcb, 0x4e, 0x58, 0xe1, 0xd7, 0xf8, 0xe2, 0x8d, 0xb5, 0x0e, 0xd2, 0xaa, 0x48, 0x15, 0xa9, 0xde, 0x4e, 0xd8, 0x21, 0xe9, 0x82, 0x30, 0xe9, 0x3f, 0x4c, 0xc8, 0xe7, 0x90, 0xb1, 0x23, 0x2f, 0x59, 0xb9, 0xc9, 0xb6, 0xb9, 0x51, 0x0a, 0x64, 0x77, 0x66, 0xd4, 0x5c, 0xc7, 0xd0, 0x2b, 0x36, 0xde, 0x79, 0xd1, 0x2f, 0x52, 0xf6, 0xf8, 0x23, 0x1f, 0x9c, 0x9d, 0x0f, 0x9d, 0x5e, 0xa1, 0x92, 0xea, 0x37, 0x7c, 0x7a, 0xcd, 0xac, 0x8d, 0xc1, 0xc7, 0x2a, 0x43, 0xa9, 0x25, 0xc8, 0x97, 0xde, 0xc3, 0x71, 0xfc, 0x6e, 0x98, 0xb4, 0xec, 0x8e, 0x2f, 0x63, 0x39, 0xca, 0x35, 0xb3, 0x8d, 0x25, 0x4c, 0x0e, 0x3d, 0xa4, 0x6f, 0x82, 0xfd, 0x11, 0x22, 0x22, 0xb8, 0x35, 0x7a, 0x9d, 0xc6, 0x15, 0x9b, 0x18, 0xa4, 0xf2, 0x47, 0x6d, 0xe6, 0x26, 0x12, 0x7c, 0x7e, 0xfa, 0x76, 0xfb, 0xe6, 0xb4, 0x62, 0x72, 0xb8, 0x40, 0xd0, 0xe3, 0xc7, 0x85, 0xa9, 0x80, 0x49, 0x72, 0x62, 0x57, 0xc4, 0x5a, 0x18, 0x2c, 0xba, 0xfa, 0xff, 0x4a, 0x43, 0x23, 0xbe, 0x30, 0xcc, 0x16, 0x66, 0x27, 0x1b, 0xb3, 0x59, 0xaf, 0x0b, 0x30, 0xa3, 0xe2, 0xbd, 0x5a, 0x1a, 0xea, 0x59, 0x49, 0xe7, 0x0b, 0xc5, 0xa5, 0xb5, 0xc5, 0xf3, 0x5f, 0xb3, 0x92, 0x68, 0xa0, 0xab, 0x08, 0xfa, 0x4f, 0x5e, 0xe5, 0xe6, 0x1a, 0x61, 0x34, 0xf1, 0x43, 0xc5, 0x2d, 0xf3, 0x93, 0x76, 0x31, 0x27, 0xfd, 0xd1, 0x40, 0x11, 0xcf, 0x72, 0xe1, 0x93, 0x07, 0x92, 0xd4, 0x23, 0x6d, 0xe7, 0x40, 0x0e, 0xe1, 0x14, 0xf5, 0x61, 0xb0, 0x95, 0xd7, 0x7a, 0x59, 0xe0, 0x3c, 0xab, 0x12, 0x15, 0x8e, 0xa3, 0x63, 0xd1, 0xab, 0x61, 0xa9, 0xf9, 0xbe, 0xfa, 0x12, 0x32, 0xe9, 0xee, 0x1c, 0x1d, 0x9b, 0x53, 0xcf, 0x39, 0x4b, 0x08, 0xcf, 0x00, 0x00]);

const input_hex_f2 = new Uint8Array([0x43, 0x80, 0x0f, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0xe5, 0xab, 0xcb, 0x4e, 0x58, 0xe1, 0xd7, 0xf8, 0xe2, 0x8d, 0xb5, 0x0e, 0xd2, 0xaa, 0x48, 0x15, 0xa9, 0xde, 0x4e, 0xd8, 0x21, 0xe9, 0x82, 0x30, 0xe9, 0x3f, 0x4c, 0xc8, 0xe7, 0x90, 0xb1, 0x23, 0x2f, 0x59, 0xb9, 0xc9, 0xb6, 0xb9, 0x51, 0x0a, 0x64, 0x77, 0x66, 0xd4, 0x5c, 0xc7, 0xd0, 0x2b, 0x36, 0xde, 0x79, 0xd1, 0x2f, 0x52, 0xf6, 0xf8, 0x23, 0x1f, 0x9c, 0x9d, 0x0f, 0x9d, 0x5e, 0xa1, 0x92, 0xea, 0x37, 0x7c, 0x7a, 0xcd, 0xac, 0x8d, 0xc1, 0xc7, 0x2a, 0x43, 0xa9, 0x25, 0xc8, 0x97, 0xde, 0xc3, 0x71, 0xfc, 0x6e, 0x98, 0xb4, 0xec, 0x8e, 0x2f, 0x63, 0x39, 0xca, 0x35, 0xb3, 0x8d, 0x25, 0x4c, 0x0e, 0x3d, 0xa4, 0x6f, 0x82, 0xfd, 0x11, 0x22, 0x22, 0xb8, 0x35, 0x7a, 0x9d, 0xc6, 0x15, 0x9b, 0x18, 0xa4, 0xf2, 0x47, 0x6d, 0xe6, 0x26, 0x12, 0x7c, 0x7e, 0xfa, 0x76, 0xfb, 0xe6, 0xb4, 0x62, 0x72, 0xb8, 0x40, 0xd0, 0xe3, 0xc7, 0x85, 0xa9, 0x80, 0x49, 0x72, 0x62, 0x57, 0xc4, 0x5a, 0x18, 0x2c, 0xba, 0xfa, 0xff, 0x4a, 0x43, 0x23, 0xbe, 0x30, 0xcc, 0x16, 0x66, 0x27, 0x1b, 0xb3, 0x59, 0xaf, 0x0b, 0x30, 0xa3, 0xe2, 0xbd, 0x5a, 0x1a, 0xea, 0x59, 0x49, 0xe7, 0x0b, 0xc5, 0xa5, 0xb5, 0xc5, 0xf3, 0x5f, 0xb3, 0x92, 0x68, 0xa0, 0xab, 0x08, 0xfa, 0x4f, 0x5e, 0xe5, 0xe6, 0x1a, 0x61, 0x34, 0xf1, 0x43, 0xc5, 0x2d, 0xf3, 0x93, 0x76, 0x31, 0x27, 0xfd, 0xd1, 0x40, 0x11, 0xcf, 0x72, 0xe1, 0x93, 0x07, 0x92, 0xd4, 0x23, 0x6d, 0xe7, 0x40, 0x0e, 0xe1, 0x14, 0xf5, 0x61, 0xb0, 0x95, 0xd7, 0x7a, 0x59, 0xe0, 0x3c, 0xab, 0x12, 0x15, 0x8e, 0xa3, 0x63, 0xd1, 0xab, 0x61, 0xa9, 0xf9, 0xbe, 0xfa, 0x12, 0x32, 0xe9, 0xee, 0x1c, 0x1d, 0x9b, 0x53, 0xcf, 0x39, 0x4b, 0x08, 0xcf, 0x00, 0x00]);

// 接口No.16 测试播放开始数据
const input_hex_10 = new Uint8Array([0x43 ,0x80 ,0x10 ,0x00 ,0xA3 ,0x01 ,0x02 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x05 ,0x7E ,0x95 ,0x3D ,0x9C ,0xE6 ,0x33 ,0xFF ,0xFB ,0x18 ,0x57 ,0x65 ,0x73 ,0x64 ,0x34 ,0x33 ,0x31 ,0x39 ,0x64 ,0x62 ,0x33 ,0x39 ,0x39 ,0x37 ,0x61 ,0x62 ,0x33 ,0x66 ,0x37 ,0x37 ,0x31 ,0x38 ,0x30 ,0x35 ,0x38 ,0x33 ,0x38 ,0x32 ,0x65 ,0x32 ,0x63 ,0x63 ,0x64 ,0x61 ,0x34 ,0x36 ,0x37 ,0x38 ,0x64 ,0x34 ,0x39 ,0x64 ,0x36 ,0x31 ,0x33 ,0x37 ,0x38 ,0x30 ,0x36 ,0x38 ,0x64 ,0x76 ,0x00 ,0x7E ,0x97 ,0x9D ,0x12 ,0xC5 ,0x6D ,0xF1 ,0xA8 ,0x34 ,0x71 ,0xD3 ,0xEB ,0x09 ,0xFB ,0x4F ,0x25 ,0x9E ,0x4E ,0xA9 ,0x5B ,0xFB ,0x30 ,0x5B ,0xB7 ,0x5C ,0x93 ,0x37 ,0x88 ,0x9D ,0x81 ,0x13 ,0x89 ,0x7C ,0x0B ,0xD3 ,0xB0 ,0xF9 ,0xD6 ,0xB2 ,0xD6 ,0x8F ,0x76 ,0xF7 ,0x56 ,0x15 ,0x12 ,0x5C ,0xED ,0x7D ,0x8F ,0x0B ,0x6E ,0x30 ,0x5B ,0x1D ,0x6F ,0x41 ,0xB4 ,0x5B ,0x84 ,0x91 ,0x2F ,0x48 ,0x66 ,0xA6 ,0x78 ,0x0E ,0x73 ,0xDD ,0x70 ,0x8A ,0xF3 ,0xE5 ,0x5F ,0x5D ,0x60 ,0x01 ,0x10 ,0x4C ,0x1A ,0x34 ,0xAC ,0xA0 ,0x17 ,0x64 ,0xFD ,0xB3 ,0xBC ,0x06 ,0x43 ,0xD0 ,0xEE ,0x30 ,0x60 ,0xF6 ,0xE6 ,0xEC ,0xE8 ,0xDA ,0x80 ,0x9A ,0xB6 ,0xDE ,0x38 ,0x99 ,0x84 ,0xC4 ,0x77 ,0x54 ,0xF4 ,0xD8 ,0xEC ,0xF2 ,0x13 ,0x5A ,0x4C ,0xEC ,0x28 ,0x00 ,0x1D ,0xA8 ,0x6F ,0xBE ,0x64 ,0xDE ,0x38 ,0xB7 ,0x24 ,0x7E ,0x65 ,0x04 ,0x98 ,0x7E ,0x32 ,0x13 ,0x31 ,0x1B ,0xBA ,0x33 ,0xA5 ,0x82 ,0xF1 ,0x8C ,0x4F ,0x60 ,0x6E ,0x09 ,0xC2 ,0x1A ,0x57 ,0x0D ,0xDB ,0x49 ,0xBE ,0x2C ,0x62 ,0xBF ,0xEA ,0x71 ,0x45 ,0x8F ,0xA7 ,0x1B ,0x46 ,0x7A ,0xCC ,0x64 ,0x83 ,0x08 ,0xF7 ,0x54 ,0xE9 ,0xDA ,0x6A ,0x9B ,0xFD ,0xB3 ,0x31 ,0x0D ,0xE0 ,0xB7 ,0x25 ,0x36 ,0xC3 ,0xEB ,0x51 ,0xEC ,0x8D ,0x28 ,0x98 ,0x8D ,0xF1 ,0x5F ,0xF7 ,0x27 ,0x62 ,0x46 ,0x69 ,0x7E ,0x79 ,0xB6 ,0x58 ,0xC7 ,0x97 ,0x45 ,0x6D ,0x0A ,0x8A ,0x95 ,0x91 ,0x03 ,0x36 ,0xE7 ,0x9F ,0x12 ,0x0D ,0xD5 ,0xBC ,0xBA ,0xF0 ,0x4C ,0x78 ,0x06 ,0xCB ,0x7B ,0x0E ,0x59 ,0x85 ,0x42 ,0x12 ,0x8B ,0xB0 ,0x80 ,0xF7 ,0x0C ,0xEC ,0x94 ,0x25 ,0xCA ,0x32 ,0x15 ,0x1D ,0xD0 ,0xC4 ,0xDB ,0x0F ,0x88 ,0xD1 ,0xEC ,0xB7 ,0x02 ,0x42 ,0xD0 ,0x18 ,0xD7 ,0xEC ,0x00 ,0x00 ,0x01 ,0x08 ,0x01 ,0x00 ,0x61 ,0x31 ,0x79 ,0x6C ,0x56 ,0x38 ,0x4F ,0x72 ,0x30 ,0x59 ,0x4A ,0x41 ,0x42 ,0x37 ,0x1E ,0x1D ,0x83 ,0x80 ,0x00 ,0xFB ,0x18 ,0x57 ,0x65 ,0x45 ,0xCB ,0x78 ,0x5C ,0x9C ,0x4B ,0x3A ,0x5E ,0x20 ,0xCF ,0x24 ,0x39 ,0xE9 ,0x77 ,0x55 ,0xDA]);

// 接口No.17 测试播放结束数据
const input_hex_11 = new Uint8Array([0x43 ,0x80 ,0x11 ,0x00 ,0xA3 ,0x01 ,0x02 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x05 ,0x7E ,0x95 ,0x3D ,0x9C ,0xE6 ,0x33 ,0xFF ,0x84 ,0xC1 ,0x5A ,0x65 ,0x73 ,0x64 ,0x34 ,0x33 ,0x31 ,0x39 ,0x64 ,0x62 ,0x33 ,0x39 ,0x39 ,0x37 ,0x61 ,0x62 ,0x33 ,0x66 ,0x37 ,0x37 ,0x31 ,0x38 ,0x30 ,0x35 ,0x38 ,0x33 ,0x38 ,0x32 ,0x65 ,0x32 ,0x63 ,0x63 ,0x64 ,0x61 ,0x34 ,0x36 ,0x37 ,0x38 ,0x64 ,0x34 ,0x39 ,0x64 ,0x36 ,0x31 ,0x33 ,0x37 ,0x38 ,0x30 ,0x36 ,0x38 ,0x64 ,0x76 ,0x00 ,0x0D ,0x88 ,0x0F ,0x6A ,0x84 ,0x87 ,0xEA ,0x08 ,0xC4 ,0xC2 ,0x9A ,0xB6 ,0xE4 ,0xDA ,0x34 ,0xBA ,0x42 ,0x24 ,0x93 ,0x1F ,0x98 ,0xBA ,0xAE ,0x23 ,0xB6 ,0x4C ,0xA6 ,0xF0 ,0x16 ,0x43 ,0xA3 ,0x4B ,0x99 ,0xDB ,0x2D ,0x41 ,0x97 ,0x73 ,0x0D ,0x8A ,0x42 ,0x6B ,0x5A ,0x75 ,0x54 ,0x71 ,0x06 ,0x28 ,0x49 ,0x13 ,0x89 ,0x73 ,0xAE ,0x25 ,0xB4 ,0x66 ,0xA0 ,0xD8 ,0xCC ,0x0F ,0xCC ,0x92 ,0x69 ,0x73 ,0xB7 ,0xEF ,0x9B ,0x93 ,0xC2 ,0xA7 ,0x46 ,0xAF ,0xDE ,0x93 ,0xCB ,0xD0 ,0x15 ,0x97 ,0x17 ,0xE3 ,0x1C ,0xA8 ,0x3F ,0xF1 ,0x93 ,0x16 ,0xB8 ,0x4B ,0xAC ,0x3A ,0x73 ,0x94 ,0x5B ,0xF3 ,0x53 ,0x16 ,0xB8 ,0xC5 ,0x10 ,0x57 ,0x57 ,0x38 ,0x37 ,0x57 ,0xE2 ,0x0F ,0x92 ,0x56 ,0x9B ,0xD9 ,0xB3 ,0x84 ,0xE5 ,0xBC ,0xB6 ,0xC3 ,0xF1 ,0x7F ,0x44 ,0xF5 ,0xC4 ,0xE8 ,0x89 ,0x1D ,0x43 ,0x8D ,0x5E ,0xA6 ,0x85 ,0x13 ,0x45 ,0xAD ,0x09 ,0x8E ,0x5F ,0x88 ,0xC8 ,0xAE ,0xF6 ,0xD1 ,0xEA ,0x94 ,0x25 ,0x23 ,0x95 ,0xC2 ,0xEC ,0xC5 ,0x0D ,0xBE ,0xD5 ,0x50 ,0x5C ,0xCB ,0x2B ,0x83 ,0xAA ,0xAA ,0x15 ,0x9F ,0x08 ,0x9F ,0x33 ,0xFD ,0x65 ,0x4E ,0xF3 ,0x89 ,0xE9 ,0x52 ,0xC9 ,0x26 ,0xAB ,0x8E ,0x80 ,0x73 ,0x9D ,0x6E ,0xEE ,0x4F ,0xC9 ,0xD3 ,0xBA ,0xAD ,0x9C ,0x02 ,0xE7 ,0x7F ,0x5A ,0x36 ,0x60 ,0x80 ,0x7F ,0x30 ,0x91 ,0x33 ,0xF9 ,0xD7 ,0x0A ,0x74 ,0x7B ,0x7D ,0x63 ,0x85 ,0x98 ,0x09 ,0x7B ,0x6E ,0x25 ,0x65 ,0x99 ,0x9F ,0xFE ,0x22 ,0x9E ,0x16 ,0x0B ,0x19 ,0x58 ,0xB1 ,0x69 ,0x89 ,0x42 ,0x50 ,0x12 ,0x1F ,0x09 ,0xED ,0x55 ,0xED ,0x00 ,0x25 ,0x96 ,0xD7 ,0xC7 ,0x09 ,0x9C ,0x3D ,0x24 ,0xF7 ,0xDA ,0xAB ,0xA1 ,0xEA ,0xD5 ,0xB0 ,0x98 ,0xE7 ,0x28 ,0x74 ,0x47 ,0xBC ,0x19 ,0xC8 ,0x8D ,0xCE ,0x00 ,0x00 ,0x01 ,0x08 ,0x01 ,0x00 ,0x61 ,0x31 ,0x79 ,0x6C ,0x56 ,0x38 ,0x4F ,0x72 ,0x30 ,0x59 ,0x4A ,0x41 ,0x42 ,0xCA ,0xE2 ,0xFA ,0xFB ,0x80 ,0x00 ,0x84 ,0xC1 ,0x5A ,0x65 ,0x45 ,0xCB ,0x78 ,0x5C ,0x9C ,0x4B ,0x3A ,0x5E ,0x20 ,0xCF ,0x24 ,0x39 ,0xE9 ,0x77 ,0x55 ,0xDA ,0x64 ,0x00 ,0x00]);


// const input_get = new Uint8Array([0x43, 0x80, 0x04, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0xcc, 0xa2, 0xd0, 0x64, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x00, 0x1f, 0xb5, 0x30, 0x05, 0x91, 0x8f, 0x70, 0x76, 0xc9, 0x2e, 0x7a, 0xab, 0x85, 0xf6, 0x28, 0x1d, 0x45, 0xa4, 0x82, 0xc3, 0x0f, 0x6c, 0xe9, 0xc9, 0xa7, 0x12, 0xe7, 0x27, 0x51, 0xea, 0x15, 0x47, 0x80, 0xbe, 0xfc, 0xfd, 0xf3, 0x46, 0x61, 0x0b, 0x29, 0x35, 0xf1, 0xd2, 0xab, 0x37, 0xc4, 0x53, 0x63, 0x97, 0xb7, 0x59, 0xef, 0x15, 0x8f, 0x8e, 0x63, 0x04, 0xb4, 0x66, 0xad, 0xba, 0x20, 0x22, 0x3c, 0x8e, 0x48, 0x2d, 0x88, 0x68, 0x42, 0x30, 0xf9, 0xa4, 0x45, 0xfa, 0x8b, 0xb9, 0x57, 0x56, 0xe7, 0xd4, 0x7a, 0x6f, 0x18, 0xda, 0x31, 0xf8, 0xed, 0x44, 0x08, 0x23, 0xc8, 0x54, 0xe0, 0x2e, 0xf0, 0x1f, 0xed, 0x7c, 0xf6, 0x2f, 0xc0, 0xa5, 0x2a, 0xcb, 0x78, 0x4b, 0xd5, 0x24, 0x35, 0x59, 0x08, 0xb8, 0x99, 0xd7, 0xc6, 0x8f, 0xe1, 0x2c, 0x0f, 0xe0, 0xb6, 0x5e, 0x13, 0x1b, 0xb4, 0xca, 0xa2, 0xac, 0x90, 0x7f, 0xd8, 0xfb, 0xf0, 0x8c, 0x2d, 0xdb, 0x31, 0xa6, 0x78, 0x76, 0xbb, 0x3c, 0xaf, 0x5a, 0xc0, 0xd7, 0x54, 0x59, 0x8a, 0x67, 0x3e, 0xe4, 0x49, 0x2d, 0xec, 0x36, 0xfe, 0xde, 0x2f, 0x30, 0x01, 0x8e, 0x3b, 0x21, 0x16, 0xdb, 0x2b, 0xa9, 0xcf, 0xea, 0xd4, 0x84, 0x51, 0x54, 0x9a, 0xf3, 0x10, 0x5f, 0x30, 0x6c, 0x37, 0x95, 0x15, 0xed, 0x1b, 0x8e, 0x90, 0x19, 0x95, 0x6c, 0xb0, 0x22, 0x9e, 0x7a, 0x24, 0x1e, 0xa6, 0xf6, 0x19, 0xaa, 0x61, 0x38, 0xfd, 0x43, 0xcd, 0x8c, 0x6a, 0xa1, 0x31, 0x20, 0x79, 0xd6, 0x52, 0x23, 0x1d, 0x1d, 0x60, 0xbb, 0x1d, 0x10, 0x1e, 0x86, 0x35, 0xbd, 0x19, 0xd7, 0x17, 0x62, 0x59, 0x59, 0x3e, 0x3c, 0xc9, 0xdd, 0x06, 0x81, 0x85, 0x6d, 0x83, 0xef, 0xb3, 0x53, 0x2a, 0x0a, 0x45, 0x76, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a, 0xc2, 0x01, 0xb8, 0x01]);
const input_1 = new Uint8Array([0x43, 0x80, 0x01, 0x00, 0xA3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7E, 0x95, 0x3D, 0x9C, 0xE6, 0x33, 0xFF, 0x1F, 0x14, 0xDA, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0xF1, 0xF2, 0xF3, 0x60, 0x3C, 0x02, 0x00, 0x60, 0x3C, 0x02, 0x00, 0x00, 0x01, 0x41, 0x42, 0x09, 0x14, 0xD4, 0x03, 0x00]);

const input_2 = new Uint8Array([0x43, 0x80, 0x01, 0x00, 0xA3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7E, 0x95, 0x3D, 0x9C, 0xE6, 0x33, 0xFF, 0x1F, 0x14, 0xDA, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0xF1, 0xF2, 0xF3, 0x61, 0x31, 0x74, 0x65, 0x73, 0x74, 0x30, 0x31, 0x32, 0x33, 0x34, 0x41, 0x42, 0x64, 0xA4, 0x33, 0x1E]);

const input_3 = new Uint8Array([0x43, 0x80, 0x01, 0x00, 0xA3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7E, 0x95, 0x3D, 0x9C, 0xE6, 0x33, 0xFF, 0x1F, 0x14, 0xDA, 0x64, 0x12, 0x90, 0xdf, 0x07, 0x08, 0x4b, 0xdd, 0xa8, 0xf6, 0x67, 0x93, 0x71, 0x07, 0x5b, 0x40, 0x12, 0x74, 0xa3, 0x8c, 0xa8, 0x99, 0x1a, 0xc2, 0xe5, 0x2c, 0x5f, 0xa0, 0x1d, 0x78, 0x07, 0x81, 0x10, 0x7f, 0xca, 0x7a, 0xf5, 0x71, 0xb6, 0xda, 0x96, 0x8e, 0x1d, 0x80, 0xa4, 0x69, 0x09, 0xdc, 0x34, 0xc2, 0xee, 0xda, 0xa2, 0x3a, 0xfa, 0x9c, 0xc0, 0xf5, 0x63, 0x40, 0xb6, 0x40, 0x73, 0xa7, 0x60, 0xc3, 0x1a, 0xff, 0x5b, 0x33, 0xbf, 0x09, 0xca, 0x73, 0xa1, 0x88, 0x14, 0x0b, 0x9c, 0x1a, 0x2d, 0x6f, 0x36, 0xd3, 0x70, 0xb2, 0x8d, 0xb8, 0xbb, 0xa6, 0x44, 0x98, 0x3b, 0xbf, 0x24, 0x65, 0x5d, 0xd4, 0x1a, 0x58, 0x72, 0xc1, 0x6b, 0xd8, 0x15, 0xb8, 0x44, 0x04, 0x88, 0xd7, 0x26, 0x40, 0x97, 0x12, 0xe0, 0xc4, 0x42, 0x7a, 0xda, 0xe0, 0x60, 0x64, 0x5e, 0x60, 0x2e, 0x98, 0x9f, 0x7f, 0x85, 0x9d, 0x10, 0x6a, 0x5c, 0xbe, 0x4e, 0x18, 0x87, 0xf3, 0x54, 0x28, 0x07, 0xe7, 0xd1, 0x1f, 0xd5, 0x09, 0xa0, 0x73, 0x18, 0x40, 0x2c, 0xa7, 0x10, 0xf1, 0x5e, 0xf2, 0xcb, 0x4b, 0xb4, 0xe8, 0xd2, 0x5b, 0x03, 0xc6, 0xd3, 0xde, 0xb3, 0x97, 0x64, 0x3e, 0x3f, 0xca, 0x77, 0x91, 0x3b, 0xcb, 0x81, 0x88, 0x83, 0x71, 0xe6, 0xfa, 0x62, 0xd9, 0x38, 0xce, 0x09, 0xd8, 0xf0, 0x79, 0x4f, 0xbf, 0xbd, 0xfc, 0xf7, 0xe5, 0xa4, 0xcc, 0xf7, 0xb5, 0x34, 0x58, 0x15, 0x51, 0x66, 0x4a, 0x91, 0x2b, 0x87, 0xc5, 0xe1, 0xb6, 0xb0, 0x0b, 0xc0, 0xef, 0x8f, 0x25, 0x8d, 0x47, 0xda, 0xc1, 0x37, 0x86, 0xa5, 0x74, 0xdc, 0x4c, 0xa5, 0xa7, 0x8a, 0xbb, 0x57, 0x44, 0x4b, 0x38, 0x75, 0xc0, 0x0b, 0x35, 0x98, 0xdb, 0xeb, 0xac, 0x82, 0x43, 0xcb, 0x57, 0xcd, 0xd1, 0xed, 0xee, 0xf2, 0x77, 0x9f, 0x3c, 0x55, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a]);

const input_4 = new Uint8Array([0x43, 0x81, 0x01, 0x00, 0xA3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x6F, 0x96, 0xA1, 0x96, 0xE5, 0x2E, 0x07, 0x5F, 0xF2, 0xDA, 0x59, 0x12, 0x90, 0xdf, 0x07, 0x08, 0x4b, 0xdd, 0xa8, 0xf6, 0x67, 0x93, 0x71, 0x07, 0x5b, 0x40, 0x12, 0x74, 0xa3, 0x8c, 0xa8, 0x99, 0x1a, 0xc2, 0xe5, 0x2c, 0x5f, 0xa0, 0x1d, 0x78, 0x07, 0x81, 0x10, 0x7f, 0xca, 0x7a, 0xf5, 0x71, 0xb6, 0xda, 0x96, 0x8e, 0x1d, 0x80, 0xa4, 0x69, 0x09, 0xdc, 0x34, 0xc2, 0xee, 0xda, 0xa2, 0x3a, 0xfa, 0x9c, 0xc0, 0xf5, 0x63, 0x40, 0xb6, 0x40, 0x73, 0xa7, 0x60, 0xc3, 0x1a, 0xff, 0x5b, 0x33, 0xbf, 0x09, 0xca, 0x73, 0xa1, 0x88, 0x14, 0x0b, 0x9c, 0x1a, 0x2d, 0x6f, 0x36, 0xd3, 0x70, 0xb2, 0x8d, 0xb8, 0xbb, 0xa6, 0x44, 0x98, 0x3b, 0xbf, 0x24, 0x65, 0x5d, 0xd4, 0x1a, 0x58, 0x72, 0xc1, 0x6b, 0xd8, 0x15, 0xb8, 0x44, 0x04, 0x88, 0xd7, 0x26, 0x40, 0x97, 0x12, 0xe0, 0xc4, 0x42, 0x7a, 0xda, 0xe0, 0x60, 0x64, 0x5e, 0x60, 0x2e, 0x98, 0x9f, 0x7f, 0x85, 0x9d, 0x10, 0x6a, 0x5c, 0xbe, 0x4e, 0x18, 0x87, 0xf3, 0x54, 0x28, 0x07, 0xe7, 0xd1, 0x1f, 0xd5, 0x09, 0xa0, 0x73, 0x18, 0x40, 0x2c, 0xa7, 0x10, 0xf1, 0x5e, 0xf2, 0xcb, 0x4b, 0xb4, 0xe8, 0xd2, 0x5b, 0x03, 0xc6, 0xd3, 0xde, 0xb3, 0x97, 0x64, 0x3e, 0x3f, 0xca, 0x77, 0x91, 0x3b, 0xcb, 0x81, 0x88, 0x83, 0x71, 0xe6, 0xfa, 0x62, 0xd9, 0x38, 0xce, 0x09, 0xd8, 0xf0, 0x79, 0x4f, 0xbf, 0xbd, 0xfc, 0xf7, 0xe5, 0xa4, 0xcc, 0xf7, 0xb5, 0x34, 0x58, 0x15, 0x51, 0x66, 0x4a, 0x91, 0x2b, 0x87, 0xc5, 0xe1, 0xb6, 0xb0, 0x0b, 0xc0, 0xef, 0x8f, 0x25, 0x8d, 0x47, 0xda, 0xc1, 0x37, 0x86, 0xa5, 0x74, 0xdc, 0x4c, 0xa5, 0xa7, 0x8a, 0xbb, 0x57, 0x44, 0x4b, 0x38, 0x75, 0xc0, 0x0b, 0x35, 0x98, 0xdb, 0xeb, 0xac, 0x82, 0x43, 0xcb, 0x57, 0xcd, 0xd1, 0xed, 0xee, 0xf2, 0x77, 0x9f, 0x3c, 0x55, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48, 0x6e, 0x70, 0xda, 0x71, 0x7a]);

const input_5 = new Uint8Array([0x43, 0x80, 0x01, 0x00, 0xA3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7E, 0x95, 0x3D, 0x9C, 0xE6, 0x33, 0xFF, 0x1F, 0x14, 0xDA, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0xF1, 0xF2, 0xF3, 0x61, 0x31, 0x74, 0x65, 0x73, 0x74, 0x30, 0x31, 0x32, 0x33, 0x34, 0x41, 0x42, 0xAE, 0x59, 0xFF, 0x29]);

const input_6 = new Uint8Array([0x43, 0x80, 0x01, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x69, 0x6a, 0x19, 0x65, 0x20, 0x75, 0xf2, 0xda, 0x59, 0x07, 0xa2, 0xbc, 0x0b, 0xab, 0x26, 0x86, 0x44, 0xeb, 0xb1, 0x1b, 0x1c, 0x26, 0x98, 0xb1, 0x9b, 0xe3, 0x60, 0xec, 0x91, 0x67, 0x72, 0x00, 0x93, 0x1e, 0x15, 0x29, 0x67, 0xf0, 0x35, 0xb9, 0x9a, 0x37, 0xed, 0x4c, 0x3d, 0x24, 0xd2, 0xe4, 0x33, 0x3d, 0x6c, 0x5f, 0xde, 0x8d, 0xd4, 0x56, 0x1b, 0xe5, 0x02, 0xb9, 0x20, 0xc3, 0x06, 0x3a, 0x9c, 0x35, 0x61, 0x36, 0x09, 0x43, 0x40, 0x32, 0x40, 0x11, 0x43, 0x45, 0x42, 0xbf, 0x9d, 0xcc, 0x29, 0xaf, 0xa7, 0x98, 0xeb, 0x87, 0x8a, 0xdf, 0xa4, 0x64, 0x9c, 0x83, 0x53, 0xf6, 0xc0, 0x4f, 0xdf, 0x06, 0x6d, 0xf3, 0x34, 0xad, 0x82, 0x93, 0xcb, 0x71, 0x39, 0xe, 0xa3, 0xc1, 0x4c, 0x36, 0x4b, 0xf2, 0x56, 0x52, 0x8b, 0xdb, 0x06, 0xc8, 0x2b, 0xfc, 0x30, 0xd7, 0x04, 0x38, 0x3d, 0xee, 0x63, 0x4b, 0xf6, 0xd3, 0x25, 0x26, 0x77, 0xd4, 0x12, 0x25, 0x83, 0x00, 0xc5, 0x8a, 0xcc, 0x64, 0xff, 0xd5, 0x95, 0x89, 0x0e, 0xbb, 0xcf, 0xa2, 0x33, 0x0a, 0x6b, 0x2b, 0x9a, 0xfb, 0x14, 0x7f, 0x16, 0xf5, 0x1c, 0x5e, 0xd1, 0xa5, 0xfc, 0x75, 0xec, 0x6a, 0x93, 0xef, 0x2d, 0xc6, 0x2c, 0x9e, 0x9e, 0x55, 0x6e, 0x14, 0xe7, 0xde, 0x7f, 0x35, 0x7f, 0x82, 0x0d, 0xaa, 0x41, 0x17, 0xc8, 0x4c, 0x76, 0x79, 0x6d, 0x9d, 0x8d, 0x78, 0xb5, 0x13, 0x24, 0xfe, 0x21, 0x95, 0x69, 0x43, 0x39, 0xeb, 0x1d, 0x72, 0xc0, 0xaf, 0x0e, 0xce, 0x30, 0x83, 0x2a, 0xb5, 0x19, 0x56, 0xaa, 0xad, 0x49, 0xc1, 0xb2, 0x2b, 0xbe, 0x6b, 0x34, 0xa3, 0xf9, 0x5f, 0x42, 0x4e, 0xd3, 0x49, 0x68, 0xcc, 0xdd, 0xe2, 0x66, 0x48, 0x09, 0xb2, 0x46, 0xd7, 0xb3, 0x24, 0x0d, 0xf6, 0x5c, 0x34, 0x3c, 0xC4, 0xd8, 0x7f, 0x40, 0xd6, 0x45, 0x26, 0x30, 0x30, 0x31, 0x38, 0x31, 0x30, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x6b, 0x79, 0x73, 0x33, 0x35, 0x37]);

const input_7 = new Uint8Array([0x43, 0x80, 0x01, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7E, 0x95, 0x3D, 0x9C, 0xE6, 0x33, 0xFF, 0x1F, 0x14, 0xDA, 0x64, 0x12, 0x90, 0xdf, 0x07, 0x08, 0x4b, 0xdd, 0xa8, 0xf6, 0x67, 0x93, 0x71, 0x07, 0x5b, 0x40, 0x12, 0x74, 0xa3, 0x8c, 0xa8, 0x99, 0x1a, 0xc2, 0xe5, 0x2c, 0x5f, 0xa0, 0x1d, 0x78, 0x07, 0x81, 0x10, 0x7f, 0xca, 0x7a, 0xf5, 0x71, 0xb6, 0xda, 0x96, 0x8e, 0x1d, 0x80, 0xa4, 0x69, 0x09, 0xdc, 0x34, 0xc2, 0xee, 0xda, 0xa2, 0x3a, 0xfa, 0x9c, 0xc0, 0xf5, 0x63, 0x40, 0xb6, 0x40, 0x73, 0xa7, 0x60, 0xc3, 0x1a, 0xff, 0x5b, 0x33, 0xbf, 0x09, 0xca, 0x73, 0xa1, 0x88, 0x14, 0x0b, 0x9c, 0x1a, 0x2d, 0x6f, 0x36, 0xd3, 0x70, 0xb2, 0x8d, 0xb8, 0xbb, 0xa6, 0x44, 0x98, 0x3b, 0xbf, 0x24, 0x65, 0x5d, 0xd4, 0x1a, 0x58, 0x72, 0xc1, 0x6b, 0xd8, 0x15, 0xb8, 0x44, 0x04, 0x88, 0xd7, 0x26, 0x40, 0x97, 0x12, 0xe0, 0xc4, 0x42, 0x7a, 0xda, 0xe0, 0x60, 0x64, 0x5e, 0x60, 0x2e, 0x98, 0x9f, 0x7f, 0x85, 0x9d, 0x10, 0x6a, 0x5c, 0xbe, 0x4e, 0x18, 0x87, 0xf3, 0x54, 0x28, 0x07, 0xe7, 0xd1, 0x1f, 0xd5, 0x09, 0xa0, 0x73, 0x18, 0x40, 0x2c, 0xa7, 0x10, 0xf1, 0x5e, 0xf2, 0xcb, 0x4b, 0xb4, 0xe8, 0xd2, 0x5b, 0x03, 0xc6, 0xd3, 0xde, 0xb3, 0x97, 0x64, 0x3e, 0x3f, 0xca, 0x77, 0x91, 0x3b, 0xcb, 0x81, 0x88, 0x83, 0x71, 0xe6, 0xfa, 0x62, 0xd9, 0x38, 0xce, 0x09, 0xd8, 0xf0, 0x79, 0x4f, 0xbf, 0xbd, 0xfc, 0xf7, 0xe5, 0xa4, 0xcc, 0xf7, 0xb5, 0x34, 0x58, 0x15, 0x51, 0x66, 0x4a, 0x91, 0x2b, 0x87, 0xc5, 0xe1, 0xb6, 0xb0, 0x0b, 0xc0, 0xef, 0x8f, 0x25, 0x8d, 0x47, 0xda, 0xc1, 0x37, 0x86, 0xa5, 0x74, 0xdc, 0x4c, 0xa5, 0xa7, 0x8a, 0xbb, 0x57, 0x44, 0x4b, 0x38, 0x75, 0xc0, 0x0b, 0x35, 0x98, 0xdb, 0xeb, 0xac, 0x82, 0x43, 0xcb, 0x57, 0xcd, 0xd1, 0xed, 0xee, 0xf2, 0x77, 0x9f, 0x3c, 0x55, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6c, 0x56, 0x38, 0x4f, 0x72, 0x30, 0x59, 0x4a, 0x48]);

const input_8 = new Uint8Array([0x43, 0x80, 0x01, 0x00, 0xa3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7e, 0x95, 0x3d, 0x9c, 0xe6, 0x33, 0xff, 0x1f, 0x14, 0xda, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0xf1, 0xf2, 0xf3, 0x61, 0x31, 0x74, 0x65, 0x73, 0x74, 0x30, 0x31, 0x32, 0x33, 0x34, 0x41, 0x42, 0x9e, 0x29, 0xf4, 0xbe]);

const input_9 = new Uint8Array([0x43, 0x80, 0x01, 0x00, 0xA3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7E, 0x95, 0x3D, 0x9C, 0xE6, 0x33, 0xFF, 0x29, 0xA0, 0x09, 0x64, 0x74, 0x17, 0x15, 0x98, 0x28, 0x57, 0x24, 0xBE, 0x22, 0x73, 0x34, 0x87, 0x1C, 0x1B, 0x24, 0xF5, 0x35, 0x8A, 0xC8, 0x50, 0x4C, 0x79, 0x64, 0x16, 0xC2, 0x66, 0x5B, 0xC4, 0x74, 0x62, 0x6D, 0x41, 0x8B, 0xE0, 0xF8, 0xB9, 0x0B, 0x7F, 0x5C, 0xD9, 0xF5, 0x83, 0x96, 0x9B, 0x70, 0xF8, 0x94, 0xF8, 0xA0, 0xE5, 0xF2, 0xEC, 0x06, 0x35, 0xD8, 0xE9, 0xBE, 0x42, 0x92, 0xB0, 0xE6, 0xA3, 0xD9, 0x04, 0x69, 0x3C, 0x0E, 0x01, 0xFA, 0xE8, 0xC0, 0x15, 0x93, 0xD9, 0xD1, 0xC0, 0x22, 0x57, 0x17, 0xC8, 0x55, 0x60, 0xEA, 0x16, 0x3E, 0x49, 0x01, 0x2E, 0xC4, 0xEC, 0xFA, 0x38, 0x21, 0x53, 0xB8, 0x7C, 0xC2, 0xBA, 0x6C, 0xD3, 0x88, 0x7F, 0x51, 0xE6, 0xCE, 0x22, 0x35, 0xDB, 0x8E, 0xFA, 0x43, 0x39, 0xAF, 0x69, 0x1C, 0x08, 0x87, 0x28, 0x38, 0x8A, 0x52, 0xE2, 0xB3, 0x8B, 0x2C, 0x49, 0xF4, 0xBA, 0x3D, 0x12, 0x6A, 0xB3, 0x41, 0xE1, 0x35, 0x4F, 0x46, 0x42, 0x65, 0x4F, 0xD5, 0x21, 0xC1, 0x9A, 0xD0, 0xEE, 0xD3, 0xE8, 0x41, 0xA9, 0xD9, 0x25, 0x82, 0xCC, 0xC2, 0x82, 0xC3, 0x6A, 0x32, 0xA1, 0x94, 0x09, 0x82, 0xDF, 0xD9, 0x61, 0x92, 0xBF, 0x3C, 0xDA, 0x40, 0x0D, 0xD1, 0x80, 0x73, 0x84, 0x97, 0x69, 0xB8, 0x53, 0x55, 0x82, 0x46, 0x73, 0xE3, 0x7B, 0x0C, 0x36, 0x57, 0xE5, 0x77, 0x72, 0x00, 0xF7, 0x25, 0x49, 0x1A, 0xD7, 0xF5, 0xA2, 0x7B, 0x5D, 0x05, 0x20, 0x2A, 0x2B, 0xBF, 0x98, 0x1E, 0xF3, 0x94, 0x37, 0x2B, 0xB1, 0xBF, 0xA0, 0x44, 0x1C, 0x5C, 0xC7, 0xD4, 0x15, 0xD5, 0x70, 0x32, 0x40, 0x06, 0xB1, 0xC3, 0xF8, 0xA8, 0xC1, 0xD2, 0x2F, 0x72, 0xED, 0x44, 0x07, 0x07, 0xB7, 0x8C, 0x6E, 0x2C, 0xAF, 0xB1, 0xF9, 0xBA, 0xCE, 0x19, 0x3D, 0x80, 0xB1, 0xB2, 0xF7, 0x7F, 0xE8, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x41, 0x42, 0xDB, 0x8D, 0x9E, 0x2A, 0x59, 0x4A, 0x41, 0x42, 0x9e, 0x29, 0xf4, 0xbe]);

// const input_a = new Uint8Array([0x43, 0x80, 0x01, 0x00, 0xA3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7E, 0x95, 0x3D, 0x9C, 0xE6, 0x33, 0xFF, 0xB2, 0xCE, 0xE6, 0x64, 0x5C, 0x1A, 0x95, 0x1A, 0x05, 0xD3, 0x6B, 0x46, 0xDF, 0x13, 0xA7, 0x42, 0x33, 0x73, 0x9A, 0x58, 0xAD, 0x42, 0x1D, 0x18, 0xD0, 0x1A, 0xE5, 0x3E, 0x9B, 0x45, 0x3D, 0x86, 0xF3, 0x37, 0x95, 0xE0, 0xA2, 0x18, 0xC3, 0x67, 0x88, 0x42, 0xDF, 0x11, 0x67, 0xB8, 0xC9, 0xEC, 0x00, 0x2B, 0x20, 0x3F, 0x53, 0xF5, 0x92, 0xCA, 0x37, 0x0C, 0xFD, 0x44, 0x93, 0x27, 0x2C, 0xD1, 0x99, 0xA3, 0x8F, 0x07, 0xEB, 0x71, 0xFD, 0x8E, 0xA0, 0x70, 0x89, 0xC1, 0x07, 0x7B, 0xE9, 0x1D, 0x21, 0xEA, 0xE7, 0x6E, 0x6E, 0xA8, 0xFA, 0x31, 0x2C, 0xFF, 0x1C, 0xA8, 0xF7, 0xA2, 0xB6, 0x1B, 0x42, 0xFB, 0x91, 0x15, 0x04, 0xC3, 0x08, 0x92, 0xFB, 0xDE, 0x94, 0x11, 0x05, 0xFC, 0xB0, 0x5F, 0x66, 0x09, 0x49, 0x91, 0xC8, 0xCA, 0x9E, 0x11, 0x80, 0x7E, 0x7B, 0xF5, 0x29, 0xBA, 0xE2, 0x61, 0x53, 0x6E, 0xD2, 0xC7, 0x2A, 0xD6, 0x39, 0xFA, 0x34, 0x37, 0x73, 0x2C, 0x47, 0xAD, 0x31, 0x6C, 0x66, 0xFF, 0xC3, 0x60, 0xCE, 0x89, 0x83, 0x49, 0x43, 0x46, 0x3E, 0x65, 0xDC, 0x6B, 0x01, 0xEC, 0x65, 0x13, 0x05, 0xA6, 0xE3, 0x60, 0xE4, 0x26, 0xF6, 0xDE, 0xDA, 0x0F, 0xBE, 0xF2, 0x6F, 0xC3, 0x39, 0x26, 0xCA, 0xEA, 0x01, 0x24, 0xE5, 0x87, 0x35, 0xF1, 0x49, 0x38, 0x14, 0x8D, 0x88, 0x3B, 0x02, 0x54, 0x17, 0xE9, 0xD6, 0xC4, 0xB6, 0x3B, 0x0B, 0x97, 0x6B, 0x2B, 0x18, 0xB6, 0x4B, 0xC0, 0xE3, 0x0A, 0x8F, 0x9B, 0xA4, 0xD9, 0x8C, 0x87, 0x91, 0x1E, 0x94, 0xFF, 0x9D, 0x55, 0x30, 0x31, 0x2C, 0x24, 0x3B, 0x4F, 0xBC, 0x44, 0x9B, 0x51, 0xA1, 0x4F, 0x34, 0x67, 0xDF, 0x43, 0xCA, 0xCE, 0xDB, 0x51, 0x66, 0x7F, 0xCB, 0x92, 0x73, 0x36, 0x33, 0x72, 0xF8, 0x10, 0xDB, 0xA0, 0xD7, 0x9D, 0x92, 0x73, 0x10, 0x96, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6C, 0x56, 0x38, 0x4F, 0x72, 0x30, 0x59, 0x4A, 0x41, 0x42, 0x8A, 0x0B, 0x01, 0xAA]);

const input_a = new Uint8Array([0x43, 0x80, 0x01, 0x00, 0xA3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7E, 0x95, 0x3D, 0x9C, 0xE6, 0x33, 0xFF, 0xB2, 0xCE, 0xE6, 0x64, 0x5C, 0x1A, 0x95, 0x1A, 0x05, 0xD3, 0x6B, 0x46, 0xDF, 0x13, 0xA7, 0x42, 0x33, 0x73, 0x9A, 0x58, 0xAD, 0x42, 0x1D, 0x18, 0xD0, 0x1A, 0xE5, 0x3E, 0x9B, 0x45, 0x3D, 0x86, 0xF3, 0x37, 0x95, 0xE0, 0xA2, 0x18, 0xC3, 0x67, 0x88, 0x42, 0xDF, 0x11, 0x67, 0xB8, 0xC9, 0xEC, 0x00, 0x2B, 0x20, 0x3F, 0x53, 0xF5, 0x92, 0xCA, 0x37, 0x0C, 0xFD, 0x44, 0x93, 0x27, 0x2C, 0xD1, 0x99, 0xA3, 0x8F, 0x07, 0xEB, 0x71, 0xFD, 0x8E, 0xA0, 0x70, 0x89, 0xC1, 0x07, 0x7B, 0xE9, 0x1D, 0x21, 0xEA, 0xE7, 0x6E, 0x6E, 0xA8, 0xFA, 0x31, 0x2C, 0xFF, 0x1C, 0xA8, 0xF7, 0xA2, 0xB6, 0x1B, 0x42, 0xFB, 0x91, 0x15, 0x04, 0xC3, 0x08, 0x92, 0xFB, 0xDE, 0x94, 0x11, 0x05, 0xFC, 0xB0, 0x5F, 0x66, 0x09, 0x49, 0x91, 0xC8, 0xCA, 0x9E, 0x11, 0x80, 0x7E, 0x7B, 0xF5, 0x29, 0xBA, 0xE2, 0x61, 0x53, 0x6E, 0xD2, 0xC7, 0x2A, 0xD6, 0x39, 0xFA, 0x34, 0x37, 0x73, 0x2C, 0x47, 0xAD, 0x31, 0x6C, 0x66, 0xFF, 0xC3, 0x60, 0xCE, 0x89, 0x83, 0x49, 0x43, 0x46, 0x3E, 0x65, 0xDC, 0x6B, 0x01, 0xEC, 0x65, 0x13, 0x05, 0xA6, 0xE3, 0x60, 0xE4, 0x26, 0xF6, 0xDE, 0xDA, 0x0F, 0xBE, 0xF2, 0x6F, 0xC3, 0x39, 0x26, 0xCA, 0xEA, 0x01, 0x24, 0xE5, 0x87, 0x35, 0xF1, 0x49, 0x38, 0x14, 0x8D, 0x88, 0x3B, 0x02, 0x54, 0x17, 0xE9, 0xD6, 0xC4, 0xB6, 0x3B, 0x0B, 0x97, 0x6B, 0x2B, 0x18, 0xB6, 0x4B, 0xC0, 0xE3, 0x0A, 0x8F, 0x9B, 0xA4, 0xD9, 0x8C, 0x87, 0x91, 0x1E, 0x94, 0xFF, 0x9D, 0x55, 0x30, 0x31, 0x2C, 0x24, 0x3B, 0x4F, 0xBC, 0x44, 0x9B, 0x51, 0xA1, 0x4F, 0x34, 0x67, 0xDF, 0x43, 0xCA, 0xCE, 0xDB, 0x51, 0x66, 0x7F, 0xCB, 0x92, 0x73, 0x36, 0x33, 0x72, 0xF8, 0x10, 0xDB, 0xA0, 0xD7, 0x9D, 0x92, 0x73, 0x10, 0x96, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6C, 0x56, 0x38, 0x4F, 0x72, 0x30, 0x59, 0x4A, 0x41, 0x42, 0x8A, 0x0B, 0x01, 0xAA]);

const input_b = new Uint8Array([0x43, 0x80, 0x0D, 0x00, 0xA3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7E, 0x95, 0x3D, 0x9C, 0xE6, 0x33, 0xFF, 0x9B, 0x25, 0xE7, 0x64, 0x65, 0x64, 0x31, 0x30, 0x61, 0x31, 0x34, 0x65, 0x38, 0x37, 0x64, 0x61, 0x64, 0x35, 0x63, 0x64, 0x34, 0x35, 0x37, 0x61, 0x37, 0x31, 0x35, 0x35, 0x35, 0x62, 0x65, 0x62, 0x65, 0x34, 0x64, 0x63, 0x34, 0x34, 0x63, 0x62, 0x37, 0x33, 0x62, 0x32, 0x65, 0x32, 0x61, 0x61, 0x35, 0x66, 0x64, 0x36, 0x30, 0x68, 0x00, 0x91, 0xAC, 0x1D, 0x67, 0x14, 0x1C, 0xA3, 0x28, 0x26, 0x7D, 0x37, 0x93, 0x7E, 0xE2, 0xD5, 0x0A, 0xF5, 0x6F, 0x6C, 0x2D, 0x81, 0xF8, 0x21, 0xA4, 0x3D, 0x71, 0x71, 0xFA, 0x64, 0x0D, 0x9B, 0x76, 0xD7, 0x24, 0x8B, 0x4F, 0x0D, 0x85, 0xEA, 0x7D, 0x1C, 0x8F, 0xB6, 0xB9, 0xD3, 0xFB, 0x75, 0x8A, 0x86, 0xFE, 0x6F, 0xFA, 0x81, 0x4F, 0xB7, 0x7C, 0x5B, 0x33, 0x53, 0x38, 0xA1, 0x02, 0xC2, 0x8A, 0x8C, 0x0C, 0xD5, 0x73, 0x94, 0x7E, 0x1E, 0x83, 0x3D, 0x0B, 0xAB, 0x5A, 0x21, 0x0D, 0x71, 0x9F, 0xA7, 0xEA, 0x8B, 0xB1, 0xF0, 0xA7, 0x8D, 0xC0, 0xC1, 0xF5, 0x41, 0xDF, 0x07, 0x39, 0x62, 0x1B, 0xAA, 0x96, 0xF5, 0xB5, 0x29, 0xC9, 0xB1, 0xCD, 0x0C, 0xD8, 0xDC, 0xBA, 0xE0, 0xEC, 0x2F, 0x82, 0x52, 0xBB, 0xD0, 0x2F, 0x4F, 0x2A, 0x13, 0xFC, 0x6A, 0x5F, 0x25, 0x63, 0xFF, 0x64, 0xAF, 0xD6, 0x67, 0xD0, 0xAC, 0x57, 0xA4, 0xB6, 0x23, 0x86, 0xD0, 0x8C, 0x04, 0x72, 0x0E, 0xCC, 0x7E, 0x82, 0xF5, 0x37, 0xD6, 0x85, 0x52, 0xD6, 0x05, 0xF3, 0xB3, 0x19, 0x18, 0x1E, 0x89, 0x84, 0xDF, 0x9C, 0x27, 0x3A, 0x72, 0x4A, 0xDA, 0xCB, 0x67, 0xA9, 0x01, 0xCF, 0xDA, 0x78, 0x9E, 0x0C, 0xD3, 0x1E, 0x53, 0xFE, 0x24, 0x56, 0xF2, 0x7D, 0xE5, 0xDB, 0xDA, 0xE5, 0x09, 0xC9, 0xE8, 0x7A, 0x55, 0x34, 0x62, 0x0A, 0xA8, 0x64, 0x96, 0xBD, 0x50, 0x00, 0xFE, 0x20, 0xE0, 0x60, 0xDE, 0xEC, 0x15, 0xF9, 0x30, 0x96, 0xE9, 0x05, 0x2F, 0xB0, 0x71, 0xB5, 0xCB, 0x07, 0x6A, 0xBA, 0x2F, 0x18, 0x61, 0x52, 0x36, 0x3D, 0xCA, 0x37, 0xF8, 0xFC, 0xE8, 0x29, 0x4C, 0x49, 0x56, 0x04, 0xAC, 0x66, 0x86, 0xC4, 0xF0, 0x43, 0x3C, 0xBF, 0x37, 0xB7, 0x26, 0xB1, 0x20, 0xBD, 0xA1, 0x1F, 0xA8, 0xFB, 0xBF, 0x12, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6C, 0x56, 0x38, 0x4F, 0x72, 0x30, 0x59, 0x4A, 0x41, 0x42, 0x50, 0xC4, 0x2D, 0xDF, 0x36, 0x66, 0x61, 0x35, 0x37, 0x31, 0x39, 0x61, 0x2D, 0x30, 0x39, 0x63, 0x39, 0x2D, 0x34, 0x66, 0x36, 0x63, 0x2D, 0x39, 0x32, 0x39, 0x34, 0x2D, 0x61, 0x32, 0x63, 0x32, 0x66, 0x62, 0x34, 0x34, 0x38, 0x64, 0x30, 0x65, 0x00]);

const input_c = new Uint8Array([0x43, 0x80, 0x07, 0x00, 0xA3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7E, 0x95, 0x3D, 0x9C, 0xE6, 0x33, 0xFF, 0x44, 0x74, 0xE8, 0x64, 0x6E, 0x39, 0x39, 0x39, 0x36, 0x65, 0x34, 0x62, 0x64, 0x66, 0x34, 0x64, 0x64, 0x64, 0x38, 0x30, 0x35, 0x36, 0x63, 0x36, 0x38, 0x39, 0x37, 0x38, 0x31, 0x35, 0x63, 0x36, 0x37, 0x63, 0x64, 0x38, 0x66, 0x39, 0x37, 0x39, 0x65, 0x36, 0x36, 0x34, 0x64, 0x34, 0x62, 0x30, 0x61, 0x63, 0x63, 0x32, 0x66, 0x61, 0x00, 0xB5, 0xD3, 0x5C, 0xA1, 0x9C, 0x15, 0xBA, 0xF4, 0x4B, 0x12, 0x93, 0x96, 0x0B, 0x04, 0xB8, 0xCB, 0x84, 0x26, 0x57, 0xE0, 0x51, 0xF4, 0xBF, 0x62, 0x0B, 0xB3, 0x85, 0x34, 0x59, 0x80, 0xBD, 0x76, 0x36, 0xB3, 0x40, 0xFC, 0x89, 0xCC, 0xA4, 0xA2, 0x43, 0xEB, 0x19, 0xB3, 0xC2, 0x5E, 0xC3, 0xF6, 0x48, 0x30, 0x11, 0x2C, 0x56, 0xA1, 0x58, 0x91, 0xD0, 0x4A, 0x62, 0x3D, 0xCF, 0x75, 0xBF, 0x50, 0x74, 0xA9, 0x15, 0x4B, 0xA6, 0x44, 0x11, 0x38, 0xC9, 0xA0, 0x66, 0x38, 0x8A, 0x4B, 0xAB, 0xC7, 0xBD, 0x9A, 0xB1, 0xFD, 0x6F, 0xFC, 0x60, 0x17, 0xA7, 0x8C, 0xFC, 0x4D, 0x0B, 0x64, 0xF2, 0x31, 0x4F, 0xFC, 0xCD, 0x1A, 0x56, 0xA9, 0x7A, 0xEB, 0xEC, 0xEA, 0xD4, 0xC8, 0x26, 0x0A, 0x4B, 0x54, 0xD3, 0x1A, 0xE9, 0x5E, 0xCA, 0xC4, 0x9D, 0x60, 0xE8, 0x0C, 0x22, 0xA9, 0x47, 0xE2, 0x9A, 0x75, 0xCE, 0xBE, 0x08, 0x24, 0x19, 0x99, 0xB9, 0xE8, 0x6D, 0xC5, 0xC4, 0xC4, 0x0E, 0xF8, 0x39, 0x8B, 0x14, 0xA4, 0xD4, 0xC1, 0x1B, 0x5E, 0x8D, 0x9B, 0x38, 0x01, 0x10, 0x71, 0x23, 0x22, 0x91, 0xB0, 0x1B, 0x68, 0x06, 0x6F, 0x4F, 0x3D, 0x4B, 0x3B, 0xC0, 0x77, 0xA3, 0xBC, 0xBC, 0x9C, 0x7C, 0x43, 0x14, 0x81, 0xA3, 0x58, 0xBB, 0x04, 0x46, 0xB5, 0xDE, 0x25, 0x61, 0xB4, 0x25, 0x57, 0x8D, 0x90, 0x81, 0x1B, 0x78, 0x50, 0x3F, 0xB6, 0x70, 0x49, 0x79, 0x0E, 0xCF, 0x8B, 0x96, 0xEC, 0x7F, 0x96, 0xE1, 0x69, 0x6B, 0xC3, 0x61, 0xC0, 0x0C, 0xB5, 0xE9, 0xAB, 0x22, 0x44, 0x27, 0xFE, 0x04, 0xA1, 0x49, 0x48, 0x6A, 0x37, 0xBE, 0x63, 0x76, 0x2C, 0x40, 0x2D, 0x79, 0xA5, 0x58, 0xB2, 0xB1, 0x4D, 0x4C, 0x64, 0x61, 0x76, 0x10, 0x0A, 0x01, 0xD9, 0x4E, 0xB8, 0x6B, 0x11, 0x84, 0x8E, 0x51, 0x13, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6C, 0x56, 0x38, 0x4F, 0x72, 0x30, 0x59, 0x4A, 0x41, 0x42, 0xB2, 0xF2, 0x1E, 0xD7, 0x30, 0x38, 0x34, 0x38, 0x30, 0x32, 0x34, 0x31, 0x64, 0x63, 0x34, 0x38, 0x30, 0x32, 0x34, 0x31, 0x30, 0x63, 0x34, 0x39, 0x30, 0x32, 0x34, 0x31, 0x66, 0x34, 0x34, 0x38, 0x30, 0x32, 0x34, 0x31, 0x00, 0x14, 0x00, 0x00, 0x00]);

const input_test_1113 = new Uint8Array([0x43, 0x80, 0x07, 0x00, 0xA3, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x7E, 0x95, 0x3D, 0x9C, 0xE6, 0x33, 0xFF, 0xEE, 0xBC, 0x51, 0x65, 0x67, 0x38, 0x30, 0x32, 0x32, 0x39, 0x33, 0x30, 0x63, 0x63, 0x37, 0x38, 0x65, 0x65, 0x66, 0x36, 0x63, 0x64, 0x36, 0x31, 0x34, 0x33, 0x38, 0x36, 0x33, 0x37, 0x36, 0x38, 0x30, 0x37, 0x62, 0x39, 0x63, 0x66, 0x31, 0x32, 0x30, 0x38, 0x30, 0x61, 0x31, 0x64, 0x62, 0x30, 0x39, 0x39, 0x35, 0x64, 0x38, 0x62, 0x00, 0xC8, 0x38, 0x44, 0xD3, 0x2A, 0xCC, 0x09, 0x1D, 0x67, 0xB0, 0xC8, 0x96, 0x7D, 0x5E, 0x0A, 0xBA, 0x7B, 0x9C, 0x0E, 0x49, 0x9B, 0xF1, 0x70, 0xD6, 0x5F, 0x97, 0x0C, 0xCC, 0x4F, 0x93, 0x63, 0x05, 0x1D, 0x47, 0xF8, 0xF1, 0xF7, 0xF9, 0x6A, 0xE3, 0x01, 0x23, 0xFC, 0x04, 0xB5, 0xB0, 0x81, 0x5F, 0x1C, 0xC0, 0x09, 0xC3, 0xE4, 0x09, 0x03, 0x6B, 0x8A, 0x2C, 0xB5, 0xB3, 0x84, 0x6A, 0xA3, 0xEA, 0x27, 0x57, 0xC8, 0x64, 0x0E, 0x4D, 0x04, 0x34, 0x16, 0x5D, 0x12, 0xB2, 0x71, 0xB6, 0x64, 0xD4, 0x4D, 0x54, 0xAF, 0xAE, 0x51, 0x17, 0xBF, 0xD5, 0x22, 0xDF, 0x50, 0xD9, 0xE2, 0x50, 0xCF, 0x42, 0xA6, 0xFA, 0x4E, 0x13, 0xA7, 0xBE, 0x13, 0x3C, 0x74, 0xB3, 0x38, 0x22, 0xC9, 0xF3, 0xFF, 0xF8, 0x7D, 0x53, 0x5A, 0x5E, 0xB0, 0x22, 0xAC, 0xBC, 0x3F, 0x08, 0x32, 0xB2, 0x21, 0x61, 0xE0, 0xC5, 0x1F, 0x94, 0x70, 0xF8, 0x63, 0xDE, 0x6A, 0xFD, 0x64, 0x19, 0xF2, 0xB8, 0x5A, 0x50, 0xDF, 0x83, 0x85, 0xD7, 0x60, 0x5F, 0x2B, 0xDF, 0x44, 0x46, 0xB0, 0xB4, 0x5B, 0x4A, 0x99, 0xD8, 0x58, 0xEC, 0x78, 0x3C, 0x51, 0x1B, 0xAB, 0x61, 0xAB, 0x00, 0x20, 0x78, 0x26, 0x31, 0x0A, 0xB8, 0x03, 0x01, 0x5D, 0x42, 0x92, 0x48, 0x80, 0x62, 0xF5, 0x69, 0x23, 0x72, 0x3A, 0x5D, 0x7B, 0x09, 0xE4, 0xB6, 0xD9, 0x4F, 0x3A, 0x03, 0xB5, 0xD3, 0x9F, 0x98, 0x7F, 0x3D, 0xBE, 0xC5, 0x53, 0xE8, 0xEE, 0x2D, 0xE6, 0x50, 0xDE, 0x3C, 0x2E, 0x53, 0x87, 0x6E, 0x53, 0x02, 0x83, 0x5D, 0x8B, 0x6F, 0x63, 0xAE, 0xE0, 0x07, 0xD6, 0x1E, 0x92, 0xBE, 0x8D, 0x22, 0x0C, 0xED, 0xA4, 0x24, 0x71, 0xEA, 0x93, 0x06, 0xF4, 0x5C, 0x73, 0xA0, 0x83, 0xA6, 0x7D, 0xAC, 0x3D, 0x2A, 0xDF, 0x17, 0x6D, 0x90, 0xEB, 0xEA, 0x00, 0x00, 0x01, 0x08, 0x01, 0x00, 0x61, 0x31, 0x79, 0x6C, 0x56, 0x38, 0x4F, 0x72, 0x30, 0x59, 0x4A, 0x41, 0x42, 0xEE, 0xC4, 0x10, 0x6D, 0xE8, 0xF9, 0xF2, 0xB7, 0x52, 0x3E, 0x9A, 0x8F, 0x94, 0x31, 0x9F, 0x85, 0xDB, 0x96, 0x4F, 0x04, 0x0A, 0x00, 0x14, 0x00]);
const test_str = "123";
//  入口函数
const hex_param_arr = cmd_analyze_0x43(input_hex_3);

// const hex_param_arr = cmd_analyze_0x43(input_3);
console.log("RETURN:", hex_param_arr);
console.log("ERRCODE is :", ERROR_CODE);
console_log(hex_param_arr);
// console.log("RETURN_str:", Array.prototype.map.call(hex_param_arr, x => x.toString()).join(''));
